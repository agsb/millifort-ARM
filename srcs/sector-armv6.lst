ARM GAS  /tmp/ccmaypZt.s 			page 1


   1              	# 0 "sector-armv6.S"
   2              	# 0 "<built-in>"
   3              	# 0 "<command-line>"
   4              	# 1 "/usr/arm-linux-gnueabi/include/stdc-predef.h" 1 3
   5              	# 0 "<command-line>" 2
   6              	# 1 "sector-armv6.S"
   7              	# 46 "sector-armv6.S"
   8              	#---------------------------------------------------------------------
   9              	# using pre-processor CPP (GNU GCC)
  10              	# for alias register names
  11              	# beware about changes
  12              	# r3, r0, r1, r2, r7 are used by ecalls in _putc and _getc
  13              	# r4, r5, r6 are generics
  14              	
  15              	# 1 "defines.S" 1
  16              	#---------------------------------------------------------------------
  17              	# using pre-processor CPP (GNU GCC)
  18              	# for alias register names
  19              	# do not change
  20              	# r0, r1, r2, r8 are used by ecalls
  21              	
  22              	# forth struct pointer, constant
  23              	usr .req r7
  24              	
  25              	# instruction pointer, preserved
  26              	ipt .req r6
  27              	
  28              	# memory index
  29              	idx .req r0
  30              	
  31              	# hash value
  32              	hsh .req r1
  33              	
  34              	# link pointer
  35              	lnk .req r2
  36              	
  37              	# word pointer
  38              	wrd .req r3
  39              	
  40              	# generic
  41              	fst .req r4
  42              	
  43              	# generic
  44              	snd .req r5
  45              	
  46              	#---------------------------------------------------------------------
  47              	# generics alias
  48              	
  49              	# as FORTH 1983
  50              	
  51              	.equ FALSE, 0
  52              	
  53              	.equ TRUE, -1
  54              	
  55              	# usefull
  56              	
  57              	.equ ONE, 1
ARM GAS  /tmp/ccmaypZt.s 			page 2


  58              	
  59              	.equ TWO, 2
  60              	
  61              	.equ CELL, 4
  62              	
  63              	# \n
  64              	.equ NL, 10
  65              	
  66              	# \r
  67              	.equ CR, 13
  68              	
  69              	# space
  70              	.equ BL, 32
  71              	
  72              	# data stack, 36 cells
  73              	
  74              	.equ spz, 36 * CELL
  75              	
  76              	# return stack, 36 cells
  77              	
  78              	.equ rpz, 36 * CELL
  79              	
  80              	# Terminal input buffer 80 bytes, (but 72 is enough), moves forwards
  81              	
  82              	.equ tibz, 80
  83              	
  84              	# PAD for temporary formating etc
  85              	
  86              	.equ padz, 48
  87              	
  88              	# highlander, immediate flag, unique
  89              	
  90              	# -2147483648
  91              	.equ FLAG_IMM, 0x80000000
  92              	
  93              	# +2147483647
  94              	.equ MASK_IMM, 0x7FFFFFFF
  95              	
  96              	#----------------------------------------------------------------------
  97              	# user structure of internal Forth variables
  98              	# accessed as offsets
  99              	
 100              	# data stack index
 101              	.equ SPTR, 0 * CELL
 102              	
 103              	# return stack index
 104              	.equ RPTR, 1 * CELL
 105              	
 106              	# last link cell in heap dictionary linked list
 107              	.equ LAST, 2 * CELL
 108              	
 109              	# next free cell in heap dictionary, aka dpt
 110              	.equ HERE, 3 * CELL
 111              	
 112              	# toin next free byte in TIB
 113              	.equ TOIN, 4 * CELL
 114              	
ARM GAS  /tmp/ccmaypZt.s 			page 3


 115              	# state flag
 116              	.equ STAT, 5 * CELL
 117              	
 118              	# heap forward
 119              	.equ HEAD, 6 * CELL
 120              	
 121              	# heap backward
 122              	.equ TAIL, 7 * CELL
 123              	
 124              	#---------------------------------------------------------------------
 125              	# primitives djb2 hash cleared of bit 31
 126              	# semis is the unique with FLAG_IMM
 127              	
 128              	.equ hash_key, 0x0B876D32
 129              	.equ hash_emit, 0x7C6B87D0
 130              	.equ hash_store, 0x0002B584
 131              	.equ hash_fetch, 0x0002B5E5
 132              	.equ hash_nand, 0x7C727500
 133              	.equ hash_plus, 0x0002B58E
 134              	.equ hash_notzero, 0x00596816
 135              	.equ hash_userat, 0x00596F90
 136              	.equ hash_colon, 0x0002B59F
 137              	.equ hash_semis, 0x8002B59E
 138              	.equ hash_exit, 0x7C6BBE85
 139              	
 140              	#---------------------------------------------------------------------
 141              	# 54 "sector-armv6.S" 2
 142              	
 143              	#---------------------------------------------------------------------
 144              	
 145              	# .equ debug, YES
 146              	
 147              	# .equ dismiss, YES
 148              	
 149              	# .equ postpones, YES
 150              	
 151              	#---------------------------------------------------------------------
 152              	# macro to define the header of words in dictionary
 153              	
 154              	.global def_word
 155              	
 156              	.set h_last, 0
 157              	
 158              	.macro def_word name, label, hash
 159              	.p2align 2, 0x0
 160              	h_\label:
 161              	        .int h_last
 162              	        .word \hash
 163              	\label:
 164              	        .set h_last, h_\label
 165              	.endm
 166              	
 167              	#---------------------------------------------------------------------
 168              	# for deep, more than one, nested calls
 169              	# also does return
 170              	
 171              	.global pushra
ARM GAS  /tmp/ccmaypZt.s 			page 4


 172              	.macro pushra
 173              	        push { r3, lr }
 174              	.endm
 175              	
 176              	.global pullra
 177              	.macro pullra
 178              	        pop { r3, pc }
 179              	.endm
 180              	
 181              	#----------------------------------------------------------------------
 182              	# user structure of internal Forth variables
 183              	# accessed as offsets
 184              	
 185              	# data stack index
 186              	.equ SPTR, 0 * CELL
 187              	
 188              	# return stack index
 189              	.equ RPTR, 1 * CELL
 190              	
 191              	# last link cell in heap dictionary linked list
 192              	.equ LAST, 2 * CELL
 193              	
 194              	# next free cell in heap dictionary, aka dpt
 195              	.equ HERE, 3 * CELL
 196              	
 197              	# toin next free byte in TIB
 198              	.equ TOIN, 4 * CELL
 199              	
 200              	# state flag
 201              	.equ STAT, 5 * CELL
 202              	
 203              	# heap forward
 204              	.equ HEAD, 6 * CELL
 205              	
 206              	# heap backward
 207              	.equ TAIL, 7 * CELL
 208              	
 209              	# easy pretty print one char
 210              	
 211              	.global putchar
 212              	
 213              	.macro putchar value
 214              	       mov a3, #\value
 215              	       bl _putc
 216              	.endm
 217              	
 218              	#----------------------------------------------------------------------
 219              	.section .data
 220              	
 221              	# There is no spoon.
 222              	
 223              	#----------------------------------------------------------------------
 224              	.section .bss
 225              	.p2align 2, 0x0
 226              	
 227              	#----------------------------------------------------------------------
 228              	# This is it
ARM GAS  /tmp/ccmaypZt.s 			page 5


 229              	
 230              	_user:
 231              	# user parameter offsets
 232 0000 00000000 	.skip 8 * CELL
 232      00000000 
 232      00000000 
 232      00000000 
 232      00000000 
 233              	
 234              	# scratch workspace, generic use.
 235              	_pack:
 236 0020 00000000 	.skip 8 * CELL
 236      00000000 
 236      00000000 
 236      00000000 
 236      00000000 
 237              	
 238              	# data stack grows backward
 239              	_spb: # bottom
 240 0040 00000000 	.skip spz
 240      00000000 
 240      00000000 
 240      00000000 
 240      00000000 
 241 00d0 00000000 	sp0: .word 0x0
 242              	
 243              	# return stack grows backward
 244              	_rpb: # bottom
 245 00d4 00000000 	.skip rpz
 245      00000000 
 245      00000000 
 245      00000000 
 245      00000000 
 246 0164 00000000 	rp0: .word 0x0
 247              	
 248              	# tib grows forward
 249              	_tib:
 250 0168 00000000 	.skip tibz
 250      00000000 
 250      00000000 
 250      00000000 
 250      00000000 
 251              	
 252              	# start of user dictionary
 253 01b8 00000000 	h_here: .word 0x0
 254              	
 255              	#----------------------------------------------------------------------
 256              	.text
 257              	.p2align 2, 0x0
 258              	
 259              	# xxx
 260              	.ifdef debug
 261              	
 262              	# 1 "puthex.S" 1
 263              	
 264              	#----------------------------------------------------------------------
 265              	# easy pretty print one char
ARM GAS  /tmp/ccmaypZt.s 			page 6


 266              	
 267              	.globl putchar
 268              	
 269              	.macro putchar value
 270              	        mov r3, #\value
 271              	        bl _putc
 272              	.endm
 273              	
 274              	
 275              	#---------------------------------------------------------------------
 276              	.globl mhit
 277              	
 278              	.macro mhit it
 279              	        putchar '\n'
 280              	        putchar \it
 281              	        putchar ' '
 282              	.endm
 283              	
 284              	#---------------------------------------------------------------------
 285              	# easy it
 286              	
 287              	.globl mhex
 288              	
 289              	.macro mhex rg
 290              	        mov r3, \rg
 291              	        pushra
 292              	        call saves
 293              	        call puthey
 294              	        call loads
 295              	        pullra
 296              	.endm
 297              	
 298              	#---------------------------------------------------------------------
 299              	# code a 32-bit word in ASCII hexadecimal, same as puthex
 300              	
 301              	.globl puthex
 302              	
 303              	puthex:
 304              	
 305              	        pushra
 306              	
 307              	        mov r6, r3
 308              	
 309              	        mov a3, ' '
 310              	
 311              	        call _putc
 312              	
 313              	        srli r5, r6, #24
 314              	        call 100f
 315              	
 316              	        srli r5, r6, #16
 317              	        call 100f
 318              	
 319              	        srli r5, r6, #8
 320              	        call 100f
 321              	
 322              	        srli r5, r6, #0
ARM GAS  /tmp/ccmaypZt.s 			page 7


 323              	        call 100f
 324              	
 325              	        mov r3, r6
 326              	
 327              	        pullra
 328              	
 329              	        ret
 330              	
 331              	100:
 332              	
 333              	        pushra
 334              	
 335              	        andi r5, #255
 336              	
 337              	        srli r4, r5, #4
 338              	        call 200f
 339              	
 340              	        srli r4, r5, #0
 341              	        call 200f
 342              	
 343              	        pullra
 344              	
 345              	        ret
 346              	
 347              	200:
 348              	        pushra
 349              	
 350              	        andi r4, #15
 351              	        ori r4, #48
 352              	        cmp r4, ':'
 353              	        blt 300f
 354              	        addi r4, #7
 355              	300:
 356              	        mov r3, r4
 357              	
 358              	        call _putc
 359              	
 360              	        pullra
 361              	
 362              	        ret
 363              	
 364              	#---------------------------------------------------------------------
 365              	# 175 "sector-armv6.S" 2
 366              	
 367              	.endif
 368              	
 369              	#----------------------------------------------------------------------
 370              	.globl _start
 371              	
 372              	_start:
 373              	
 374              	#----------------------------------------------------------------------
 375              	# do any system inits
 376              	init:
 377              	# just for sake
 378              	
 379              	        # bl _init
ARM GAS  /tmp/ccmaypZt.s 			page 8


 380              	
 381              	#----------------------------------------------------------------------
 382              	# do what need be only once
 383              	cold:
 384              	# load user pointer address
 385              	
 386 0000 D8729FE5 	        ldr usr, =_user
 387              	
 388              	#----------------------------------------------------------------------
 389              	# wipe the dictionary
 390              	warm:
 391              	# next heap free cell (end of .bss)
 392              	
 393 0004 D8429FE5 	        ldr fst, =h_here
 394 0008 0C4087E5 	        str fst, [usr, #HERE]
 395              	
 396              	# link list of headers, aka dictionary
 397              	
 398 000c 0040A0E3 	        ldr fst, =h_last
 399 0010 084087E5 	        str fst, [usr, #LAST]
 400              	
 401              	#---------------------------------------------------------------------
 402              	# reset TIB
 403              	reset:
 404              	
 405 0014 CC429FE5 	        ldr fst, =_tib
 406 0018 104087E5 	        str fst, [usr, #TOIN]
 407              	
 408              	#---------------------------------------------------------------------
 409              	# unexpected end of dictionary
 410              	miss:
 411              	
 412              	# xxx
 413              	.ifdef dismiss
 414              	
 415              	        j abort
 416              	
 417              	# wipe remains compiled
 418              	
 419              	        putchar '\n'
 420              	# trd id BL
 421              	100:
 422              	        lb fst, 0 (idx)
 423              	        call _putc
 424              	 beq fst, trd, 100f
 425              	 addi idx, idx, ONE
 426              	 j 100b
 427              	100:
 428              	        putchar ' '
 429              	  putchar '?'
 430              	
 431              	wipe:
 432              	        # compiling ?
 433              	        ldr fst, [usr, #STAT]
 434              	        cmp fst, #0
 435              	        bne 100f
 436              	
ARM GAS  /tmp/ccmaypZt.s 			page 9


 437              	        # wipe remains
 438              	        ldr fst, [usr, #HEAD]
 439              	        str fst, [usr, #HERE]
 440              	100:
 441              	        b error
 442              	
 443              	.endif
 444              	
 445              	
 446              	# reset stacks
 447              	
 448              	error:
 449              	
 450              	# xxx
 451              	.ifdef debug
 452              	
 453              	        putchar '\n'
 454              	        putchar '?'
 455              	        putchar '?'
 456              	        putchar '\n'
 457              	.endif
 458              	
 459              	#---------------------------------------------------------------------
 460              	abort:
 461              	# reset data stack
 462              	
 463 001c C8429FE5 	        ldr fst, =sp0
 464 0020 004087E5 	        str fst, [usr, #SPTR]
 465              	
 466              	#---------------------------------------------------------------------
 467              	quit:
 468              	# reset return stack
 469              	
 470 0024 C4429FE5 	        ldr fst, =rp0
 471 0028 044087E5 	        str fst, [usr, #RPTR]
 472              	
 473              	# stat is 'interpret' == \0
 474              	
 475 002c 0040A0E3 	        mov fst, #0
 476 0030 144087E5 	        str fst, [usr, #STAT]
 477              	
 478              	#---------------------------------------------------------------------
 479              	okey:
 480              	
 481              	# bl prompt_okey
 482              	
 483              	# xxx
 484              	.ifdef debug
 485              	
 486              	        ldr fst, [usr, #STAT]
 487              	        cmp fst, #0
 488              	        bne tick
 489              	
 490              	        putchar '\n'
 491              	        putchar 'O'
 492              	        putchar 'K'
 493              	        putchar '\n'
ARM GAS  /tmp/ccmaypZt.s 			page 10


 494              	
 495              	.endif
 496              	
 497              	#---------------------------------------------------------------------
 498              	# get a hash of the next token
 499              	tick:
 500              	
 501 0034 150000EB 	        bl token
 502              	
 503              	#---------------------------------------------------------------------
 504              	# search for a hash in dictionary linked list
 505              	
 506              	find:
 507              	
 508              	# get the latest link
 509              	
 510 0038 082097E5 	        ldr lnk, [usr, #LAST]
 511              	
 512              	100:
 513              	# verify end of dictionary, take care to abort
 514              	
 515 003c 000052E3 	        cmp lnk, #0
 516 0040 F5FFFF0A 	        beq miss
 517              	
 518              	# linked list
 519              	
 520 0044 0240A0E1 	        mov fst, lnk
 521              	
 522              	# move next link
 523              	
 524 0048 002094E5 	        ldr lnk, [fst, #0]
 525              	
 526              	# move to hash
 527              	
 528 004c 044094E2 	        adds fst, #CELL
 529              	
 530 0050 003094E5 	        ldr wrd, [fst]
 531              	
 532              	# mask the FLAG and hold it in snd
 533              	
 534 0054 0251A0E3 	        ldr snd, =FLAG_IMM
 535              	
 536 0058 035015E0 	        ands snd, wrd
 537              	
 538 005c 053023E0 	        eor wrd, snd
 539              	
 540              	# compare
 541              	
 542 0060 030051E1 	        cmp hsh, wrd
 543              	
 544 0064 F4FFFF1A 	        bne 100b
 545              	
 546              	# wrd points to or start of code or list of references
 547              	
 548 0068 044094E2 	        adds fst, #CELL
 549              	
 550              	#---------------------------------------------------------------------
ARM GAS  /tmp/ccmaypZt.s 			page 11


 551              	eval:
 552              	# executing ? if state == 0
 553              	
 554 006c 143097E5 	        ldr wrd, [usr, #STAT]
 555              	
 556 0070 000053E3 	        cmp wrd, #0
 557              	
 558 0074 0300000A 	        beq execute
 559              	
 560              	.ifdef postpones
 561              	# postpone ? if state < 0
 562              	
 563              	        cmp wrd, #0
 564              	
 565              	        blt postpone
 566              	.endif
 567              	
 568              	# immediate ?
 569              	
 570 0078 000055E3 	        cmp snd, #0
 571              	
 572 007c 0100001A 	        bne immediate
 573              	
 574              	#---------------------------------------------------------------------
 575              	.ifdef postpones
 576              	# reset state to compile
 577              	postpone:
 578              	        addi trd, zero, ONE
 579              	        sw trd, [usr, #STAT]
 580              	        adds wrd, ONE
 581              	        sw wrd, STAT (usr)
 582              	.endif
 583              	
 584              	# compiling ? if state != 0
 585              	compile:
 586              	
 587 0080 260000EB 	        bl docomma
 588              	
 589 0084 EAFFFFEA 	        b tick
 590              	
 591              	#---------------------------------------------------------------------
 592              	execute:
 593              	immediate:
 594              	
 595 0088 64629FE5 	        ldr ipt, =tickpt
 596              	
 597 008c 760000EA 	        b pick
 598              	
 599              	# zzzz
 600              	#---------------------------------------------------------------------
 601              	# in place every token, no rewinds
 602              	# the counter is placed at space before word
 603              	# returns a c-str
 604              	# \0 as eol goto getline
 605              	token:
 606              	
 607              	        pushra
ARM GAS  /tmp/ccmaypZt.s 			page 12


 607 0090 08402DE9 	>  push { r3,lr }
 608              	
 609              	# last position on tib
 610              	
 611              	100:
 612              	
 613 0094 100097E5 	        ldr idx, [usr, #TOIN]
 614              	
 615              	# skip spaces
 616              	200:
 617              	
 618 0098 0050D0E5 	        ldrb snd, [idx, #0]
 619              	
 620 009c 000055E3 	        cmp snd, #0
 621 00a0 0300000A 	        beq gets
 622              	
 623 00a4 200055E3 	        cmp snd, #BL
 624 00a8 0E00001A 	        bne hash
 625              	
 626 00ac 010090E2 	        adds idx, #ONE
 627              	
 628 00b0 F8FFFFEA 	        b 200b
 629              	
 630              	#---------------------------------------------------------------------
 631              	# absolute crude getline, no overflow check, the _getc handle EOF
 632              	
 633              	gets:
 634              	
 635 00b4 2C029FE5 	        ldr idx, =_tib
 636              	
 637 00b8 100087E5 	        str idx, [usr, #TOIN]
 638              	
 639              	# ever start with a space
 640              	
 641 00bc 2040A0E3 	        mov fst, #BL
 642              	
 643              	# loop and fill the TIB until \n
 644              	# no test end of buffer
 645              	300:
 646 00c0 0040C0E5 	        strb fst, [idx, #0]
 647              	
 648 00c4 010090E2 	        adds idx, #ONE
 649              	
 650              	# get next char
 651              	
 652 00c8 750000EB 	        bl _getc
 653              	
 654              	# echo it, if need
 655              	
 656              	        # bl _putc
 657              	
 658              	# cast to 7-bit ascii only
 659              	
 660              	        # and fst, fst, #127
 661              	
 662              	# \n ^J ends the line
 663              	
ARM GAS  /tmp/ccmaypZt.s 			page 13


 664 00cc 0A0054E3 	        cmp fst, #NL
 665 00d0 FAFFFF1A 	        bne 300b
 666              	
 667              	# at end-of-line
 668              	400:
 669              	
 670              	# replace \n with space
 671 00d4 2040A0E3 	        mov fst, #BL
 672 00d8 0040C0E5 	        strb fst, [idx, #0]
 673              	
 674              	# mark eol with \0
 675 00dc 0040A0E3 	        mov fst, #0
 676 00e0 0140C0E5 	        strb fst, [idx, #1]
 677              	
 678 00e4 EAFFFFEA 	        b 100b
 679              	
 680              	#---------------------------------------------------------------------
 681              	.equ DJB2, 5381
 682              	.equ SFHT, 5
 683              	#----------------------------------------------------------------------
 684              	# djb2 hash function
 685              	# classic djb2 hash algorithm, with XOR, adapted from cdb_hash
 686              	# idx pointer to str
 687              	# trd holds the end of word
 688              	# uses fst, snd, trd
 689              	# hsh returns the hash
 690              	# idx returns next space after
 691              	hash:
 692              	djb2:
 693              	
 694              	.ifdef dismiss
 695              	
 696              	 mov wrd, idx
 697              	
 698              	.endif
 699              	
 700              	        # easy 5381
 701              	
 702 00e8 08129FE5 	        ldr hsh, =DJB2
 703              	
 704              	100:
 705 00ec 0040D0E5 	        ldrb fst, [idx, #0]
 706              	
 707 00f0 200054E3 	        cmp fst, #BL
 708 00f4 0500000A 	        beq 200f
 709              	
 710 00f8 0150A0E1 	        mov snd, hsh
 711              	
 712 00fc 8112A0E1 	        lsl hsh, hsh, #SFHT
 713              	
 714 0100 051081E0 	        add hsh, snd
 715              	
 716 0104 041021E0 	        eor hsh, fst
 717              	
 718 0108 010090E2 	        adds idx, #ONE
 719              	
 720 010c F6FFFFEA 	        b 100b
ARM GAS  /tmp/ccmaypZt.s 			page 14


 721              	
 722              	#---------------------------------------------------------------------
 723              	200:
 724              	
 725              	# mask forth flag
 726              	mask:
 727              	
 728 0110 0241E0E3 	        ldr fst, =MASK_IMM
 729              	
 730 0114 041001E0 	        and hsh, fst
 731              	
 732              	#---------------------------------------------------------------------
 733              	# save toin
 734              	
 735 0118 100087E5 	        str idx, [usr, #TOIN]
 736              	
 737              	.ifdef dismiss
 738              	
 739              	        mov idx, wrd
 740              	
 741              	.endif
 742              	
 743              	        pullra
 743 011c 0880BDE8 	>  pop { r3,pc }
 744              	
 745              	#---------------------------------------------------------------------
 746              	docomma:
 747              	
 748 0120 0C0097E5 	        ldr idx, [usr, #HERE]
 749              	
 750 0124 004080E5 	        str fst, [idx]
 751              	
 752 0128 040090E2 	        adds idx, #CELL
 753              	
 754 012c 0C0087E5 	        str idx, [usr, #HERE]
 755              	
 756 0130 1EFF2FE1 	        bx lr
 757              	
 758              	#---------------------------------------------------------------------
 759              	
 760              	# the primitives
 761              	
 762              	#---------------------------------------------------------------------
 763              	# 582 "sector-armv6.S"
 764              	### version 1.5.0
 765              	#---------------------------------------------------------------------
 766              	pull2:
 767              	
 768 0134 000097E5 	        ldr idx, [usr, #SPTR]
 769              	
 770 0138 004090E5 	        ldr fst, [idx, #0]
 771              	
 772 013c 040090E2 	        adds idx, #CELL
 773              	
 774 0140 005090E5 	        ldr snd, [idx, #0]
 775              	
 776 0144 1EFF2FE1 	        bx lr
ARM GAS  /tmp/ccmaypZt.s 			page 15


 777              	
 778              	#---------------------------------------------------------------------
 779              	# ( -- c )
 780              	def_word "key", "key", hash_key
 780              	> .p2align 2,0x0
 780              	> h_key:
 780 0148 00000000 	>  .int h_last
 780 014c 326D870B 	>  .word hash_key
 780              	> key:
 780              	>  .set h_last,h_key
 781              	
 782 0150 530000EB 	        bl _getc
 783              	
 784 0154 240000EA 	        b push1
 785              	
 786              	#---------------------------------------------------------------------
 787              	# ( c -- )
 788              	def_word "emit", "emit", hash_emit
 788              	> .p2align 2,0x0
 788              	> h_emit:
 788 0158 48010000 	>  .int h_last
 788 015c D0876B7C 	>  .word hash_emit
 788              	> emit:
 788              	>  .set h_last,h_emit
 789              	
 790 0160 F3FFFFEB 	        bl pull2
 791              	
 792 0164 560000EB 	        bl _putc
 793              	
 794 0168 220000EA 	        b save1
 795              	
 796              	#---------------------------------------------------------------------
 797              	# ( a w -- ), [a] = w
 798              	def_word "!", "store", hash_store
 798              	> .p2align 2,0x0
 798              	> h_store:
 798 016c 58010000 	>  .int h_last
 798 0170 84B50200 	>  .word hash_store
 798              	> store:
 798              	>  .set h_last,h_store
 799              	
 800 0174 EEFFFFEB 	        bl pull2
 801              	
 802 0178 005084E5 	        str snd, [fst, #0]
 803              	
 804              	drop1:
 805 017c 040090E2 	        adds idx, #CELL
 806              	
 807 0180 1C0000EA 	        b save1
 808              	
 809              	#---------------------------------------------------------------------
 810              	# ( a -- w ), w = [a]
 811              	def_word "@", "fetch", hash_fetch
 811              	> .p2align 2,0x0
 811              	> h_fetch:
 811 0184 6C010000 	>  .int h_last
 811 0188 E5B50200 	>  .word hash_fetch
ARM GAS  /tmp/ccmaypZt.s 			page 16


 811              	> fetch:
 811              	>  .set h_last,h_fetch
 812              	
 813 018c E8FFFFEB 	        bl pull2
 814              	
 815 0190 004094E5 	        ldr fst, [fst, #0]
 816              	
 817 0194 150000EA 	        b back1
 818              	
 819              	#---------------------------------------------------------------------
 820              	# ( w1 w2 -- w), NOT(w1 AND w2)
 821              	def_word "nand", "nand", hash_nand
 821              	> .p2align 2,0x0
 821              	> h_nand:
 821 0198 84010000 	>  .int h_last
 821 019c 0075727C 	>  .word hash_nand
 821              	> nand:
 821              	>  .set h_last,h_nand
 822              	
 823 01a0 E3FFFFEB 	        bl pull2
 824              	
 825 01a4 054004E0 	        and fst, snd
 826              	
 827 01a8 0440E0E1 	        mvn fst, fst
 828              	
 829 01ac 100000EA 	        b keep1
 830              	
 831              	#---------------------------------------------------------------------
 832              	# ( w1 w2 -- w), w = w1 + w2
 833              	def_word "+", "plus", hash_plus
 833              	> .p2align 2,0x0
 833              	> h_plus:
 833 01b0 98010000 	>  .int h_last
 833 01b4 8EB50200 	>  .word hash_plus
 833              	> plus:
 833              	>  .set h_last,h_plus
 834              	
 835 01b8 DDFFFFEB 	        bl pull2
 836              	
 837 01bc 054084E0 	        add fst, snd
 838              	
 839 01c0 0B0000EA 	        b keep1
 840              	
 841              	#---------------------------------------------------------------------
 842              	# ( 0 -- FALSE) | ( n -- TRUE), not #0 at top ?
 843              	def_word "0#", "zeroq", hash_notzero
 843              	> .p2align 2,0x0
 843              	> h_zeroq:
 843 01c4 B0010000 	>  .int h_last
 843 01c8 16685900 	>  .word hash_notzero
 843              	> zeroq:
 843              	>  .set h_last,h_zeroq
 844              	
 845 01cc D8FFFFEB 	        bl pull2
 846              	
 847              	isfalse:
 848              	
ARM GAS  /tmp/ccmaypZt.s 			page 17


 849 01d0 000054E3 	        cmp fst, #0
 850 01d4 2200000A 	        beq next
 851              	
 852              	istrue:
 853              	
 854 01d8 0040E0E3 	        mov fst, #TRUE
 855              	
 856 01dc 030000EA 	        b back1
 857              	
 858              	#---------------------------------------------------------------------
 859              	# ( -- state ), return an reference
 860              	def_word "u@", "userat", hash_userat
 860              	> .p2align 2,0x0
 860              	> h_userat:
 860 01e0 C4010000 	>  .int h_last
 860 01e4 906F5900 	>  .word hash_userat
 860              	> userat:
 860              	>  .set h_last,h_userat
 861              	
 862 01e8 004097E5 	        ldr fst, [usr, #0]
 863              	
 864              	push1:
 865 01ec 000097E5 	        ldr idx, [usr, #SPTR]
 866              	
 867              	back1:
 868 01f0 040050E2 	        subs idx, #CELL
 869              	
 870              	keep1:
 871 01f4 004080E5 	        str fst, [idx, #0]
 872              	
 873              	save1:
 874 01f8 000087E5 	        str idx, [usr, #SPTR]
 875              	
 876 01fc 180000EA 	        b next
 877              	
 878              	#---------------------------------------------------------------------
 879              	def_word ":", "colon", hash_colon
 879              	> .p2align 2,0x0
 879              	> h_colon:
 879 0200 E0010000 	>  .int h_last
 879 0204 9FB50200 	>  .word hash_colon
 879              	> colon:
 879              	>  .set h_last,h_colon
 880              	# save here, panic if semis not follow elsewhere
 881              	
 882 0208 0C4097E5 	        ldr fst, [usr, #HERE]
 883              	
 884 020c 184087E5 	        str fst, [usr, #HEAD]
 885              	
 886              	# stat is 'compile' == 1
 887              	
 888 0210 0140A0E3 	        mov fst, #ONE
 889              	
 890 0214 144087E5 	        str fst, [usr, #STAT]
 891              	
 892              	# make a header:
 893              	
ARM GAS  /tmp/ccmaypZt.s 			page 18


 894              	create:
 895              	
 896              	# copy last into (here)
 897              	
 898 0218 084097E5 	        ldr fst, [usr, #LAST]
 899              	
 900 021c BFFFFFEB 	        bl docomma
 901              	
 902              	# get following token
 903              	
 904 0220 9AFFFFEB 	        bl token
 905              	
 906              	# copy hash into (here)
 907              	
 908 0224 0140A0E1 	        mov fst, hsh
 909              	
 910              	comma:
 911              	
 912 0228 BCFFFFEB 	        bl docomma
 913              	
 914 022c 0C0000EA 	        b next
 915              	
 916              	#---------------------------------------------------------------------
 917              	def_word ";", "semis", hash_semis
 917              	> .p2align 2,0x0
 917              	> h_semis:
 917 0230 00020000 	>  .int h_last
 917 0234 9EB50280 	>  .word hash_semis
 917              	> semis:
 917              	>  .set h_last,h_semis
 918              	# update last, panic if colon not lead elsewhere
 919              	
 920 0238 184097E5 	        ldr fst, [usr, #HEAD]
 921              	
 922 023c 084087E5 	        str fst, [usr, #LAST]
 923              	
 924              	# stat is 'interpret' == 0
 925              	
 926 0240 0040A0E3 	        mov fst, #0
 927              	
 928 0244 144087E5 	        str fst, [usr, #STAT]
 929              	
 930              	# compound words must ends with exit
 931              	
 932 0248 AC409FE5 	        ldr fst, =exit
 933              	
 934 024c F5FFFFEA 	        b comma
 935              	
 936              	#---------------------------------------------------------------------
 937              	# Minimal Indirect Thread Code Engine
 938              	
 939              	# this is the Forth heart beat.
 940              	
 941              	# nest aka enter or docol, unnest aka exit or semis;
 942              	
 943              	# "why there is no 'docol at start of words ?"
 944              	
ARM GAS  /tmp/ccmaypZt.s 			page 19


 945              	# ( -- )
 946              	def_word "exit", "exit", hash_exit
 946              	> .p2align 2,0x0
 946              	> h_exit:
 946 0250 30020000 	>  .int h_last
 946 0254 85BE6B7C 	>  .word hash_exit
 946              	> exit:
 946              	>  .set h_last,h_exit
 947              	unnest: #; exit
 948              	# return pull, ipt = (rpt), rpt += cell
 949              	
 950 0258 040097E5 	        ldr idx, [usr, #RPTR]
 951              	
 952 025c 046090E4 	        ldr ipt, [idx], #CELL
 953              	
 954              	        # adds idx, #CELL
 955              	
 956 0260 040087E5 	        str idx, [usr, #RPTR]
 957              	
 958              	next:
 959              	# wrd = (ipt) #; ipt += cell
 960              	
 961 0264 003096E5 	        ldr wrd, [ipt]
 962              	
 963 0268 046096E2 	        adds ipt, #CELL
 964              	
 965              	pick:
 966              	# compare address, if is a primitive then jumps
 967              	
 968 026c 8C009FE5 	        ldr idx, =ends
 969              	
 970 0270 000054E1 	        cmp fst, idx
 971              	
 972 0274 000000AA 	        bge nest
 973              	
 974              	jump:
 975              	# jump to primitive
 976              	
 977 0278 34FF2FE1 	        blx fst
 978              	
 979              	nest: #; enter
 980              	# return push, rp -= cell, (rpt) = ipt
 981              	
 982 027c 040097E5 	        ldr idx, [usr, #RPTR]
 983              	
 984              	        # subs idx, #CELL
 985              	
 986 0280 046020E5 	        str ipt, [idx, #-CELL]!
 987              	
 988 0284 040087E5 	        str idx, [usr, #RPTR]
 989              	
 990              	move:
 991              	# indirect access
 992              	
 993 0288 0460A0E1 	        mov ipt, fst
 994              	
 995 028c F4FFFFEA 	        b next
ARM GAS  /tmp/ccmaypZt.s 			page 20


 996              	
 997              	#---------------------------------------------------------------------
 998              	# the outer loop, need for indirect
 999              	
 1000              	tickpt:
 1001              	
 1002 0290 34000000 	        .word okey
 1003              	
 1004              	#----------------------------------------------------------------------
 1005              	# system dependences, 1 ecall
 1006              	
 1007              	
 1008              	# 1 "minimal.S" 1
 1009              	# 54 "minimal.S"
 1010              	#---------------------------------------------------------------------
 1011              	# 1 ecall stuff, 29/07/2025, vide:
 1012              	# https:
 1013              	
 1014              	.equ _ZERO, 0
 1015              	.equ _ONE, 1
 1016              	.equ _STDIN, 0
 1017              	.equ _STDOUT, 1
 1018              	
 1019              	.equ _SBRK, 45
 1020              	.equ _GETC, 63
 1021              	.equ _PUTC, 64
 1022              	.equ _EXIT, 93
 1023              	
 1024              	#---------------------------------------------------------------------
 1025              	.section .bss
 1026              	_char:
 1027 01bc 00000000 	.word 0x0
 1028              	
 1029              	#---------------------------------------------------------------------
 1030              	
 1031              	.section .text
 1032              	.p2align 2, 0x0
 1033              	
 1034              	#---------------------------------------------------------------------
 1035              	# 1 ecall for exit
 1036              	_exit:
 1037 0294 0000A0E3 	        mov r0, #_ZERO
 1038 0298 5D70A0E3 	        mov r7, #_EXIT
 1039 029c 000000EF 	        swi #0
 1040              	
 1041              	# load system call for init
 1042              	_init:
 1043              	
 1044 02a0 1EFF2FE1 	        bx lr
 1045              	
 1046              	#---------------------------------------------------------------------
 1047              	# 1 ecall for getc
 1048              	_getc:
 1049 02a4 0000A0E3 	        mov r0, #_STDIN
 1050 02a8 54109FE5 	        ldr r1, =_char
 1051 02ac 0120A0E3 	        mov r2, #_ONE
 1052 02b0 3F70A0E3 	        mov r7, #_GETC
ARM GAS  /tmp/ccmaypZt.s 			page 21


 1053 02b4 000000EF 	        swi #0
 1054              	
 1055              	        #EOF?
 1056 02b8 000050E3 	        cmp r0, #0
 1057 02bc F4FFFF0A 	        beq _exit
 1058              	
 1059 02c0 0030D1E5 	        ldrb r3, [r1]
 1060              	
 1061              	        # echo, leave fallthrough
 1062              	        # bx lr
 1063              	
 1064              	#---------------------------------------------------------------------
 1065              	# 1 ecall for putc
 1066              	_putc:
 1067 02c4 0100A0E3 	        mov r0, #_STDOUT
 1068 02c8 34109FE5 	        ldr r1, =_char
 1069 02cc 0120A0E3 	        mov r2, #_ONE
 1070 02d0 4070A0E3 	        mov r7, #_PUTC
 1071 02d4 0030C1E5 	        strb r3, [r1]
 1072              	
 1073              	_rets:
 1074 02d8 000000EF 	        swi #0
 1075 02dc 1EFF2FE1 	        bx lr
 1076              	# 827 "sector-armv6.S" 2
 1077              	
 1078              	#---------------------------------------------------------------------
 1079              	# any other primitives after exit
 1080              	#---------------------------------------------------------------------
 1081              	
 1082              	.ifdef debug
 1083              	
 1084              	.equ EXTRAS, YES
 1085              	
 1086              	#----------------------------------------------------------------------
 1087              	.ifdef EXTRAS
 1088              	
 1089              	.set into_extras, h_exit
 1090              	
 1091              	# 1 "extras-armv6.S" 1
 1092              	# 28 "extras-armv6.S"
 1093              	#---------------------------------------------------------------------
 1094              	
 1095              	# djb2 hash cleared of bit 31
 1096              	
 1097              	.equ hash_sfr, 0x00596858
 1098              	.equ hash_exec, 0x7C6BC01E
 1099              	.equ hash_docode, 0x0059695B
 1100              	.equ hash_donext, 0x0059697A
 1101              	.equ hash_bye, 0x0B874AFB
 1102              	.equ hash_abort, 0x0A1DFF4F
 1103              	.equ hash_splist, 0x005966B8
 1104              	.equ hash_rplist, 0x005966B9
 1105              	.equ hash_dump, 0x7C6B2FE9
 1106              	.equ hash_words, 0x0B6953F8
 1107              	.equ hash_see, 0x0B878F36
 1108              	.equ hash_dot, 0x0002B58B
 1109              	
ARM GAS  /tmp/ccmaypZt.s 			page 22


 1110              	.equ hash_cell, 0x7C70B163
 1111              	.equ hash_cellplus, 0x0A86DDE8
 1112              	.equ hash_cellless, 0x0A86DDEE
 1113              	
 1114              	#---------------------------------------------------------------------
 1115              	# extras links to last primitive
 1116              	
 1117              	#---------------------------------------------------------------------
 1118              	# ( w -- w/2 ) #; shift right
 1119              	def_word "2/", "sfr", hash_sfr
 1120              	
 1121              	        bl pull2
 1122              	
 1123              	        lsr fst, #1
 1124              	
 1125              	        b keep1
 1126              	
 1127              	#---------------------------------------------------------------------
 1128              	# ( a -- ) execute a word address at top of data stack
 1129              	# not change the data stack
 1130              	def_word "exec", "exec", hash_exec
 1131              	
 1132              	        bl pull2
 1133              	
 1134              	        mov wrd, fst
 1135              	
 1136              	        b pick
 1137              	
 1138              	#---------------------------------------------------------------------
 1139              	# ( -- ) execute a jump to a reference at IP
 1140              	def_word ":$", "docode", hash_docode
 1141              	
 1142              	        bx ipt
 1143              	
 1144              	#---------------------------------------------------------------------
 1145              	# ( -- ) execute a jump to next
 1146              	def_word ";$", "donext", hash_donext
 1147              	
 1148              	        b next
 1149              	
 1150              	#---------------------------------------------------------------------
 1151              	# ( -- ) exit forth
 1152              	def_word "bye", "byes", hash_bye
 1153              	
 1154              	        b _exit
 1155              	
 1156              	#---------------------------------------------------------------------
 1157              	# ( -- ) ae abort
 1158              	def_word "abort", "aborts", hash_abort
 1159              	
 1160              	        b abort
 1161              	
 1162              	#---------------------------------------------------------------------
 1163              	# ( -- ) ae list of data stack
 1164              	def_word ".S", "splist", hash_splist
 1165              	
 1166              	        bl stackS
ARM GAS  /tmp/ccmaypZt.s 			page 23


 1167              	
 1168              	        b next
 1169              	
 1170              	#----------------------------------------------------------------------
 1171              	# ( -- ) ae list of return stack
 1172              	def_word ".R", "rplist", hash_rplist
 1173              	
 1174              	        bl stackR
 1175              	
 1176              	        b next
 1177              	
 1178              	#----------------------------------------------------------------------
 1179              	# ( a b -- a b ) dumps memory between a and b
 1180              	def_word "dump", "dump", hash_dump
 1181              	
 1182              	        bl pull2
 1183              	
 1184              	        # xxx
 1185              	
 1186              	        ldr fst, [usr, #HERE]
 1187              	
 1188              	        ldr snd, =h_here
 1189              	
 1190              	        bl dumps
 1191              	
 1192              	        b drop1
 1193              	
 1194              	#----------------------------------------------------------------------
 1195              	# ( -- ) list all words in compiled dictionary,
 1196              	def_word "words", "words", hash_words
 1197              	
 1198              	        bl wordf
 1199              	
 1200              	        b next
 1201              	
 1202              	#----------------------------------------------------------------------
 1203              	# ( -- ) list last word in dictionary,
 1204              	def_word "see", "sees", hash_see
 1205              	
 1206              	        bl wordu
 1207              	
 1208              	        b next
 1209              	
 1210              	#----------------------------------------------------------------------
 1211              	# ( u -- u ) print tos in hexadecimal
 1212              	def_word ".", "dot", hash_dot
 1213              	
 1214              	        bl pull2
 1215              	
 1216              	        bl puthex
 1217              	
 1218              	        b next
 1219              	
 1220              	
 1221              	#---------------------------------------------------------------------
 1222              	# ( -- w ) size of a cell
 1223              	def_word "cell", "cell", hash_cell
ARM GAS  /tmp/ccmaypZt.s 			page 24


 1224              	
 1225              	        mov fst, #4
 1226              	
 1227              	        b push1
 1228              	
 1229              	#---------------------------------------------------------------------
 1230              	
 1231              	# Note:
 1232              	# nested user calls must save ra, relies in pushra and pullra
 1233              	# these routines uses Sn registers
 1234              	
 1235              	#---------------------------------------------------------------------
 1236              	
 1237              	#---------------------------------------------------------------------
 1238              	# code a 32-bit word in ASCII hexadecimal
 1239              	
 1240              	puthex:
 1241              	
 1242              	        pushra
 1243              	
 1244              	        bl saves
 1245              	
 1246              	        mov r5, #58
 1247              	
 1248              	        lsr r3, r2, #24
 1249              	        bl 100f
 1250              	
 1251              	        lsr r3, r2, #16
 1252              	        bl 100f
 1253              	
 1254              	        lsr r3, r2, #8
 1255              	        bl 100f
 1256              	
 1257              	        #lsr r3, r2, #0
 1258              	        bl 100f
 1259              	
 1260              	        b returns
 1261              	
 1262              	100:
 1263              	
 1264              	        pushra
 1265              	
 1266              	        and r3, #0xFF
 1267              	
 1268              	        lsr r4, r3, #4
 1269              	        bl 200f
 1270              	
 1271              	        #lsr r4, r3, #0
 1272              	        bl 200f
 1273              	
 1274              	        pullra
 1275              	
 1276              	200:
 1277              	        pushra
 1278              	
 1279              	        and r4, r4, #15
 1280              	        orr r4, r4, #48
ARM GAS  /tmp/ccmaypZt.s 			page 25


 1281              	        cmp r4, r5
 1282              	        blt 300f
 1283              	        add r4, r4, #7
 1284              	300:
 1285              	        mov r3, r4
 1286              	
 1287              	        bl _putc
 1288              	
 1289              	        pullra
 1290              	
 1291              	#----------------------------------------------------------------------
 1292              	saves:
 1293              	        push { r0-r6 }
 1294              	
 1295              	        bx lr
 1296              	
 1297              	#----------------------------------------------------------------------
 1298              	loads:
 1299              	        pop { r0-r6 }
 1300              	
 1301              	        bx lr
 1302              	
 1303              	returns:
 1304              	
 1305              	        bl loads
 1306              	
 1307              	        pullra
 1308              	
 1309              	#----------------------------------------------------------------------
 1310              	# shows all words at dictionary
 1311              	wordf:
 1312              	        pushra
 1313              	
 1314              	        bl saves
 1315              	
 1316              	# get the latest link
 1317              	
 1318              	        ldr r6, [usr, #LAST]
 1319              	
 1320              	        putchar '\n'
 1321              	
 1322              	100:
 1323              	# verify end of dictionary
 1324              	
 1325              	        cmp r6, #0
 1326              	        beq returns
 1327              	
 1328              	        mov r5, r6
 1329              	
 1330              	        ldr r6, [r5]
 1331              	
 1332              	        bl wordt
 1333              	
 1334              	        ldr r4, =h_here
 1335              	        cmp r6, r4
 1336              	        blt returns
 1337              	
ARM GAS  /tmp/ccmaypZt.s 			page 26


 1338              	        b 100b
 1339              	
 1340              	#----------------------------------------------------------------------
 1341              	# shows one word at dictionary
 1342              	wordu:
 1343              	        pushra
 1344              	
 1345              	        bl saves
 1346              	
 1347              	        ldr r5, [usr, #LAST]
 1348              	
 1349              	        bl wordt
 1350              	
 1351              	        b returns
 1352              	
 1353              	#----------------------------------------------------------------------
 1354              	# show entry in dictionary
 1355              	wordt:
 1356              	
 1357              	        pushra
 1358              	
 1359              	# set the end-of-word as exit address
 1360              	
 1361              	        putchar '\n'
 1362              	        putchar '#'
 1363              	
 1364              	100:
 1365              	        putchar '\n'
 1366              	
 1367              	        mhex r5
 1368              	
 1369              	        ldr r4, [r5]
 1370              	
 1371              	        mhex r4
 1372              	
 1373              	        adds r5, #4
 1374              	
 1375              	        ldr r3, =exit
 1376              	        cmp r4, r3
 1377              	        bne 100b
 1378              	
 1379              	        pullra
 1380              	
 1381              	#----------------------------------------------------------------------
 1382              	stackS:
 1383              	
 1384              	        pushra
 1385              	
 1386              	        bl saves
 1387              	
 1388              	        putchar '\n'
 1389              	        putchar 'S'
 1390              	
 1391              	        ldr r6, [usr, #SPTR]
 1392              	        ldr r5, =sp0
 1393              	
 1394              	        bl stackp
ARM GAS  /tmp/ccmaypZt.s 			page 27


 1395              	
 1396              	        b returns
 1397              	
 1398              	#----------------------------------------------------------------------
 1399              	stackR:
 1400              	
 1401              	        pushra
 1402              	
 1403              	        bl saves
 1404              	
 1405              	        putchar '\n'
 1406              	        putchar 'R'
 1407              	
 1408              	        ldr r6, [usr, #RPTR]
 1409              	        ldr r5, =rp0
 1410              	
 1411              	        bl stackp
 1412              	
 1413              	        b returns
 1414              	
 1415              	#----------------------------------------------------------------------
 1416              	stackp:
 1417              	
 1418              	        pushra
 1419              	
 1420              	        putchar '='
 1421              	
 1422              	        mhex r5
 1423              	
 1424              	        putchar '['
 1425              	        putchar ' '
 1426              	
 1427              	        cmp r5, r6
 1428              	        beq 200f
 1429              	
 1430              	100:
 1431              	        subs r5, #CELL
 1432              	        ldr r4, [r5]
 1433              	        mhex r4
 1434              	
 1435              	        cmp r5, r6
 1436              	        bne 100b
 1437              	
 1438              	200:
 1439              	        putchar ']'
 1440              	
 1441              	        pullra
 1442              	
 1443              	#----------------------------------------------------------------------
 1444              	
 1445              	dumps:
 1446              	
 1447              	        pushra
 1448              	
 1449              	        bl saves
 1450              	
 1451              	        # last (tos)
ARM GAS  /tmp/ccmaypZt.s 			page 28


 1452              	        mov r5, r3
 1453              	
 1454              	        mhex r5
 1455              	
 1456              	        # init (nos)
 1457              	        mov r6, r4
 1458              	
 1459              	        mhex r6
 1460              	
 1461              	        # many
 1462              	        sub r5, r6
 1463              	
 1464              	        mhex r5
 1465              	
 1466              	        putchar '\n'
 1467              	
 1468              	100:
 1469              	        mov r7, #8
 1470              	        putchar '\n'
 1471              	        mhex r6
 1472              	        putchar ':'
 1473              	        putchar ' '
 1474              	200:
 1475              	        ldr r4, [r6]
 1476              	        mhex r4
 1477              	        adds r6, #CELL
 1478              	        subs r5, #CELL
 1479              	
 1480              	        subs r7, #1
 1481              	        cmp r7, #0
 1482              	        beq 100b
 1483              	        cmp r7, r5
 1484              	        bne 200b
 1485              	
 1486              	        b returns
 1487              	
 1488              	#----------------------------------------------------------------------
 1489              	
 1490              	shows:
 1491              	        pushra
 1492              	
 1493              	        bl saves
 1494              	
 1495              	# registers
 1496              	
 1497              	       putchar '\n'
 1498              	        putchar 'R'
 1499              	        putchar ' '
 1500              	
 1501              	       putchar '0'
 1502              	        putchar ' '
 1503              	        mhex r0
 1504              	       putchar '1'
 1505              	        putchar ' '
 1506              	        mhex r1
 1507              	       putchar '2'
 1508              	        putchar ' '
ARM GAS  /tmp/ccmaypZt.s 			page 29


 1509              	        mhex r2
 1510              	       putchar '3'
 1511              	        putchar ' '
 1512              	        mhex r3
 1513              	       putchar '4'
 1514              	        putchar ' '
 1515              	        mhex r4
 1516              	       putchar '5'
 1517              	        putchar ' '
 1518              	        mhex r5
 1519              	       putchar '6'
 1520              	        putchar ' '
 1521              	        mhex r6
 1522              	
 1523              	# user parameters
 1524              	
 1525              	        putchar '\n'
 1526              	        putchar 'U'
 1527              	        putchar ' '
 1528              	
 1529              	       putchar 'S'
 1530              	        putchar ' '
 1531              	        ldr r3, [usr, #STAT]
 1532              	        mhex r3
 1533              	
 1534              	       putchar 'L'
 1535              	        putchar ' '
 1536              	        ldr r3, [usr, #LAST]
 1537              	        mhex r3
 1538              	
 1539              	       putchar 'H'
 1540              	        putchar ' '
 1541              	        ldr r3, [usr, #HERE]
 1542              	        mhex r3
 1543              	
 1544              	       putchar 'D'
 1545              	        putchar ' '
 1546              	        ldr r3, [usr, #HEAD]
 1547              	        mhex r3
 1548              	
 1549              	       putchar 'S'
 1550              	        putchar 'P'
 1551              	        putchar ' '
 1552              	        ldr r3, [usr, #SPTR]
 1553              	        mhex r3
 1554              	
 1555              	       putchar 'R'
 1556              	        putchar 'P'
 1557              	        putchar ' '
 1558              	        ldr r3, [usr, #RPTR]
 1559              	        mhex r3
 1560              	
 1561              	        b returns
 1562              	
 1563              	#----------------------------------------------------------------------
 1564              	# code a ASCII $0-F(Z) hexadecimal in a value
 1565              	
ARM GAS  /tmp/ccmaypZt.s 			page 30


 1566              	.ifdef NUMBERS
 1567              	
 1568              	number:
 1569              	
 1570              	        pushra
 1571              	
 1572              	        bl saves
 1573              	
 1574              	        ldr r6, #0
 1575              	        add r7, #8
 1576              	100:
 1577              	        bl digit
 1578              	        lsr r6, #4
 1579              	        orr r6, r3
 1580              	        subs r7, #1
 1581              	        cmp r7, #0
 1582              	        bne 100b
 1583              	
 1584              	        b returns
 1585              	
 1586              	digit:
 1587              	        #; any valid digit, 0-9 and A-Z, do not care
 1588              	        ldr r3, [idx]
 1589              	        # compare with '0'
 1590              	        subs r3, #48
 1591              	        cmp r3, #0
 1592              	        blt 200f
 1593              	        # compare with 10
 1594              	        cmp r3, #10
 1595              	        blt 100f
 1596              	        # offset to 'A'
 1597              	        subs r3, #7
 1598              	100:
 1599              	# is_okey
 1600              	        bx lr
 1601              	
 1602              	200:
 1603              	# is_error
 1604              	        bx lr
 1605              	
 1606              	.endif
 1607              	# 842 "sector-armv6.S" 2
 1608              	
 1609              	.set h_last, from_extras
 1610              	
 1611              	.endif
 1612              	
 1613              	.endif
 1614              	
 1615              	#----------------------------------------------------------------------
 1616              	.ifndef EXTRAS
 1617              	
 1618              	.set h_last, h_exit
 1619              	
 1620              	.endif
 1621              	
 1622              	#---------------------------------------------------------------------
ARM GAS  /tmp/ccmaypZt.s 			page 31


 1623              	# Beware, ends must be at last word in primitive ditionary !
 1624              	#---------------------------------------------------------------------
 1625              	
 1626              	ends:
 1627              	
 1628              	# .word 0xDEADBEEF
 1629              	
 1630              	#---------------------------------------------------------------------
 1631 02e0 00000000 	.end
 1631      B8010000 
 1631      68010000 
 1631      D0000000 
 1631      64010000 
ARM GAS  /tmp/ccmaypZt.s 			page 32


DEFINED SYMBOLS
     /tmp/ccmaypZt.s:51     *ABS*:00000000 FALSE
     /tmp/ccmaypZt.s:53     *ABS*:ffffffff TRUE
     /tmp/ccmaypZt.s:57     *ABS*:00000001 ONE
     /tmp/ccmaypZt.s:59     *ABS*:00000002 TWO
     /tmp/ccmaypZt.s:61     *ABS*:00000004 CELL
     /tmp/ccmaypZt.s:64     *ABS*:0000000a NL
     /tmp/ccmaypZt.s:67     *ABS*:0000000d CR
     /tmp/ccmaypZt.s:70     *ABS*:00000020 BL
     /tmp/ccmaypZt.s:74     *ABS*:00000090 spz
     /tmp/ccmaypZt.s:78     *ABS*:00000090 rpz
     /tmp/ccmaypZt.s:82     *ABS*:00000050 tibz
     /tmp/ccmaypZt.s:86     *ABS*:00000030 padz
     /tmp/ccmaypZt.s:91     *ABS*:80000000 FLAG_IMM
     /tmp/ccmaypZt.s:94     *ABS*:7fffffff MASK_IMM
     /tmp/ccmaypZt.s:101    *ABS*:00000000 SPTR
     /tmp/ccmaypZt.s:104    *ABS*:00000004 RPTR
     /tmp/ccmaypZt.s:107    *ABS*:00000008 LAST
     /tmp/ccmaypZt.s:110    *ABS*:0000000c HERE
     /tmp/ccmaypZt.s:113    *ABS*:00000010 TOIN
     /tmp/ccmaypZt.s:116    *ABS*:00000014 STAT
     /tmp/ccmaypZt.s:119    *ABS*:00000018 HEAD
     /tmp/ccmaypZt.s:122    *ABS*:0000001c TAIL
     /tmp/ccmaypZt.s:128    *ABS*:0b876d32 hash_key
     /tmp/ccmaypZt.s:129    *ABS*:7c6b87d0 hash_emit
     /tmp/ccmaypZt.s:130    *ABS*:0002b584 hash_store
     /tmp/ccmaypZt.s:131    *ABS*:0002b5e5 hash_fetch
     /tmp/ccmaypZt.s:132    *ABS*:7c727500 hash_nand
     /tmp/ccmaypZt.s:133    *ABS*:0002b58e hash_plus
     /tmp/ccmaypZt.s:134    *ABS*:00596816 hash_notzero
     /tmp/ccmaypZt.s:135    *ABS*:00596f90 hash_userat
     /tmp/ccmaypZt.s:136    *ABS*:0002b59f hash_colon
     /tmp/ccmaypZt.s:137    *ABS*:8002b59e hash_semis
     /tmp/ccmaypZt.s:138    *ABS*:7c6bbe85 hash_exit
     /tmp/ccmaypZt.s:946    .text:00000250 h_last
     /tmp/ccmaypZt.s:225    .bss:00000000 $d
     /tmp/ccmaypZt.s:230    .bss:00000000 _user
     /tmp/ccmaypZt.s:235    .bss:00000020 _pack
     /tmp/ccmaypZt.s:239    .bss:00000040 _spb
     /tmp/ccmaypZt.s:241    .bss:000000d0 sp0
     /tmp/ccmaypZt.s:244    .bss:000000d4 _rpb
     /tmp/ccmaypZt.s:246    .bss:00000164 rp0
     /tmp/ccmaypZt.s:249    .bss:00000168 _tib
     /tmp/ccmaypZt.s:253    .bss:000001b8 h_here
     /tmp/ccmaypZt.s:372    .text:00000000 _start
     /tmp/ccmaypZt.s:376    .text:00000000 init
     /tmp/ccmaypZt.s:383    .text:00000000 cold
     /tmp/ccmaypZt.s:386    .text:00000000 $a
     /tmp/ccmaypZt.s:390    .text:00000004 warm
     /tmp/ccmaypZt.s:403    .text:00000014 reset
     /tmp/ccmaypZt.s:410    .text:0000001c miss
     /tmp/ccmaypZt.s:448    .text:0000001c error
     /tmp/ccmaypZt.s:460    .text:0000001c abort
     /tmp/ccmaypZt.s:467    .text:00000024 quit
     /tmp/ccmaypZt.s:479    .text:00000034 okey
     /tmp/ccmaypZt.s:499    .text:00000034 tick
     /tmp/ccmaypZt.s:605    .text:00000090 token
ARM GAS  /tmp/ccmaypZt.s 			page 33


     /tmp/ccmaypZt.s:506    .text:00000038 find
     /tmp/ccmaypZt.s:551    .text:0000006c eval
     /tmp/ccmaypZt.s:592    .text:00000088 execute
     /tmp/ccmaypZt.s:593    .text:00000088 immediate
     /tmp/ccmaypZt.s:585    .text:00000080 compile
     /tmp/ccmaypZt.s:746    .text:00000120 docomma
     /tmp/ccmaypZt.s:1000   .text:00000290 tickpt
     /tmp/ccmaypZt.s:965    .text:0000026c pick
     /tmp/ccmaypZt.s:633    .text:000000b4 gets
     /tmp/ccmaypZt.s:691    .text:000000e8 hash
     /tmp/ccmaypZt.s:1048   .text:000002a4 _getc
     /tmp/ccmaypZt.s:681    *ABS*:00001505 DJB2
     /tmp/ccmaypZt.s:682    *ABS*:00000005 SFHT
     /tmp/ccmaypZt.s:692    .text:000000e8 djb2
     /tmp/ccmaypZt.s:726    .text:00000110 mask
     /tmp/ccmaypZt.s:766    .text:00000134 pull2
     /tmp/ccmaypZt.s:780    .text:00000148 $d
     /tmp/ccmaypZt.s:780    .text:00000148 h_key
     /tmp/ccmaypZt.s:780    .text:00000150 key
     /tmp/ccmaypZt.s:782    .text:00000150 $a
     /tmp/ccmaypZt.s:864    .text:000001ec push1
     /tmp/ccmaypZt.s:788    .text:00000158 $d
     /tmp/ccmaypZt.s:788    .text:00000158 h_emit
     /tmp/ccmaypZt.s:788    .text:00000160 emit
     /tmp/ccmaypZt.s:790    .text:00000160 $a
     /tmp/ccmaypZt.s:1066   .text:000002c4 _putc
     /tmp/ccmaypZt.s:873    .text:000001f8 save1
     /tmp/ccmaypZt.s:798    .text:0000016c $d
     /tmp/ccmaypZt.s:798    .text:0000016c h_store
     /tmp/ccmaypZt.s:798    .text:00000174 store
     /tmp/ccmaypZt.s:800    .text:00000174 $a
     /tmp/ccmaypZt.s:804    .text:0000017c drop1
     /tmp/ccmaypZt.s:811    .text:00000184 $d
     /tmp/ccmaypZt.s:811    .text:00000184 h_fetch
     /tmp/ccmaypZt.s:811    .text:0000018c fetch
     /tmp/ccmaypZt.s:813    .text:0000018c $a
     /tmp/ccmaypZt.s:867    .text:000001f0 back1
     /tmp/ccmaypZt.s:821    .text:00000198 $d
     /tmp/ccmaypZt.s:821    .text:00000198 h_nand
     /tmp/ccmaypZt.s:821    .text:000001a0 nand
     /tmp/ccmaypZt.s:823    .text:000001a0 $a
     /tmp/ccmaypZt.s:870    .text:000001f4 keep1
     /tmp/ccmaypZt.s:833    .text:000001b0 $d
     /tmp/ccmaypZt.s:833    .text:000001b0 h_plus
     /tmp/ccmaypZt.s:833    .text:000001b8 plus
     /tmp/ccmaypZt.s:835    .text:000001b8 $a
     /tmp/ccmaypZt.s:843    .text:000001c4 $d
     /tmp/ccmaypZt.s:843    .text:000001c4 h_zeroq
     /tmp/ccmaypZt.s:843    .text:000001cc zeroq
     /tmp/ccmaypZt.s:845    .text:000001cc $a
     /tmp/ccmaypZt.s:847    .text:000001d0 isfalse
     /tmp/ccmaypZt.s:958    .text:00000264 next
     /tmp/ccmaypZt.s:852    .text:000001d8 istrue
     /tmp/ccmaypZt.s:860    .text:000001e0 $d
     /tmp/ccmaypZt.s:860    .text:000001e0 h_userat
     /tmp/ccmaypZt.s:860    .text:000001e8 userat
     /tmp/ccmaypZt.s:862    .text:000001e8 $a
ARM GAS  /tmp/ccmaypZt.s 			page 34


     /tmp/ccmaypZt.s:879    .text:00000200 $d
     /tmp/ccmaypZt.s:879    .text:00000200 h_colon
     /tmp/ccmaypZt.s:879    .text:00000208 colon
     /tmp/ccmaypZt.s:882    .text:00000208 $a
     /tmp/ccmaypZt.s:894    .text:00000218 create
     /tmp/ccmaypZt.s:910    .text:00000228 comma
     /tmp/ccmaypZt.s:917    .text:00000230 $d
     /tmp/ccmaypZt.s:917    .text:00000230 h_semis
     /tmp/ccmaypZt.s:917    .text:00000238 semis
     /tmp/ccmaypZt.s:920    .text:00000238 $a
     /tmp/ccmaypZt.s:946    .text:00000258 exit
     /tmp/ccmaypZt.s:946    .text:00000250 $d
     /tmp/ccmaypZt.s:946    .text:00000250 h_exit
     /tmp/ccmaypZt.s:947    .text:00000258 unnest
     /tmp/ccmaypZt.s:950    .text:00000258 $a
     /tmp/ccmaypZt.s:1626   .text:000002e0 ends
     /tmp/ccmaypZt.s:979    .text:0000027c nest
     /tmp/ccmaypZt.s:974    .text:00000278 jump
     /tmp/ccmaypZt.s:990    .text:00000288 move
     /tmp/ccmaypZt.s:1002   .text:00000290 $d
     /tmp/ccmaypZt.s:1014   *ABS*:00000000 _ZERO
     /tmp/ccmaypZt.s:1015   *ABS*:00000001 _ONE
     /tmp/ccmaypZt.s:1016   *ABS*:00000000 _STDIN
     /tmp/ccmaypZt.s:1017   *ABS*:00000001 _STDOUT
     /tmp/ccmaypZt.s:1019   *ABS*:0000002d _SBRK
     /tmp/ccmaypZt.s:1020   *ABS*:0000003f _GETC
     /tmp/ccmaypZt.s:1021   *ABS*:00000040 _PUTC
     /tmp/ccmaypZt.s:1022   *ABS*:0000005d _EXIT
     /tmp/ccmaypZt.s:1026   .bss:000001bc _char
     /tmp/ccmaypZt.s:1036   .text:00000294 _exit
     /tmp/ccmaypZt.s:1037   .text:00000294 $a
     /tmp/ccmaypZt.s:1042   .text:000002a0 _init
     /tmp/ccmaypZt.s:1073   .text:000002d8 _rets
     /tmp/ccmaypZt.s:1631   .text:000002e0 $d

UNDEFINED SYMBOLS
def_word
pushra
pullra
putchar
