ARM GAS  /tmp/cczPqhvn.s 			page 1


   1              	# 0 "sector-arm.S"
   2              	# 0 "<built-in>"
   3              	# 0 "<command-line>"
   4              	# 1 "sector-arm.S"
   5              	# 53 "sector-arm.S"
   6              	#----------------------------------------------------------------------
   7              	
   8              	# Stuff for compiler
   9              	
  10              	
  11              	#---------------------------------------------------------------------
  12              	
  13              	# uncomment to include the extras (sic)
  14              	# use_extras = 1
  15              	
  16              	# uncomment to include the extensions (sic)
  17              	# use_extensions = 1
  18              	
  19              	#---------------------------------------------------------------------
  20              	# alias
  21              	
  22              	# FORTH 1983
  23              	
  24              	.equ FALSE, 0
  25              	
  26              	.equ TRUE, -1
  27              	
  28              	# usefull
  29              	
  30              	.equ ONE, 1
  31              	
  32              	.equ TWO, 2
  33              	
  34              	.equ NLC, 10
  35              	
  36              	.equ SPC, 32
  37              	
  38              	# cell size, 4 bytes, 32-bit
  39              	
  40              	.equ CELL, 4
  41              	
  42              	# data stack, 36 cells, moves backwards, push decreases before copy
  43              	
  44              	.equ spz, 36 * CELL
  45              	
  46              	# return stack, 36 cells, moves backwards, push decreases before copy
  47              	
  48              	.equ rpz, 36 * CELL
  49              	
  50              	# Terminal input buffer 80 bytes, (but 72 is enough), moves forwards
  51              	
  52              	.equ tibz, 80
  53              	
  54              	# reserves 32 bytes for pad scratch, moves forwards
  55              	
  56              	.equ padz, 32
  57              	
ARM GAS  /tmp/cczPqhvn.s 			page 2


  58              	
  59              	#---------------------------------------------------------------------
  60              	# djb2 hash cleared of bit 31
  61              	# semis with FLAG_IMM
  62              	.equ hash_key, 0x0B876D32
  63              	.equ hash_emit, 0x7C6B87D0
  64              	.equ hash_store, 0x0002B584
  65              	.equ hash_fetch, 0x0002B5E5
  66              	.equ hash_plus, 0x0002B58E
  67              	.equ hash_colon, 0x0002B59F
  68              	.equ hash_semis, 0x8002B59E
  69              	.equ hash_nand, 0x7C727500
  70              	.equ hash_exit, 0x7C6BBE85
  71              	.equ hash_bye, 0x0B874AFB
  72              	.equ hash_notzero, 0x00596816
  73              	.equ hash_userat, 0x005970D6
  74              	
  75              	#---------------------------------------------------------------------
  76              	# macro to define the header of words in dictionary
  77              	
  78              	# makes:
  79              	# h_name:
  80              	# .word link_to_previous_entry
  81              	# .byte strlen(name) + flags
  82              	# .byte name + pad
  83              	# name:
  84              	
  85              	
  86              	# highlander, immediate flag. using lui
  87              	# must load the high 20 bits, then the low 12 bits
  88              	
  89              	.equ FLAG_IMM, 0x80000
  90              	
  91              	.macro def_word name, label, last, hash
  92              	#.p2align 2, 0x00
  93              	h_\label:
  94              	        .word \last
  95              	        .word \hash
  96              	
  97              	\label:
  98              	.endm
  99              	
 100              	# hashes can't be calculated inside macros,
 101              	# all hsh must be by hand.
 102              	# but only for few primitives :)
 103              	
 104              	
 105              	#---------------------------------------------------------------------
 106              	
 107              	
 108              	
 109              	
 110              	#---------------------------------------------------------------------
 111              	# using pre-processor CPP (GNU GCC)
 112              	# for alias register names
 113              	
 114              	# forth struct pointer, constant
ARM GAS  /tmp/cczPqhvn.s 			page 3


 115              	
 116              	
 117              	# instruction pointer, preserved
 118              	
 119              	
 120              	# memory index
 121              	
 122              	
 123              	# hash value
 124              	
 125              	
 126              	# link pointer
 127              	
 128              	
 129              	# word pointer
 130              	
 131              	
 132              	# generic
 133              	
 134              	
 135              	# generic
 136              	
 137              	
 138              	# keep ascii space,
 139              	
 140              	
 141              	# keep ra, return addres
 142              	
 143              	
 144              	#----------------------------------------------------------------------
 145              	#.section .data
 146              	
 147              	# no data
 148              	
 149              	#----------------------------------------------------------------------
 150              	.section .bss
 151              	.p2align 2, 0x0
 152              	
 153              	# user structure of internal Forth variables
 154              	# catch:
 155              	# the order matters for forth !
 156              	# stacks have fixed size
 157              	
 158              	# name some offsets
 159              	
 160              	# state flag
 161              	.equ STAT, 0
 162              	
 163              	# toin next free byte in TIB
 164              	.equ TOIN, 1
 165              	
 166              	# last link cell in heap dictionary linked list
 167              	.equ LAST, 2
 168              	
 169              	# next free cell in heap dictionary, aka dpt
 170              	.equ HERE, 3
 171              	
ARM GAS  /tmp/cczPqhvn.s 			page 4


 172              	# data stack index
 173              	.equ SPT, 4
 174              	
 175              	# return stack index
 176              	.equ RPT, 5
 177              	
 178              	# next token in TIB
 179              	.equ TOUT, 6
 180              	
 181              	# hold 'here while compile
 182              	.equ ONCE, 7
 183              	
 184              	# heap forward
 185              	.equ HEAD, 8
 186              	
 187              	# heap backward
 188              	.equ TAIL, 9
 189              	
 190              	# this is it
 191              	_user:
 192 ???? 00000000 	.skip (TAIL + 1) * CELL
 192      00000000 
 192      00000000 
 192      00000000 
 192      00000000 
 193              	
 194              	# tib grows forward
 195              	_tib:
 196 ???? 00000000 	.skip tibz
 196      00000000 
 196      00000000 
 196      00000000 
 196      00000000 
 197              	
 198              	# pad grows forward
 199              	_pad:
 200 ???? 00000000 	.skip padz
 200      00000000 
 200      00000000 
 200      00000000 
 200      00000000 
 201              	
 202              	# data stack grows backward
 203              	_spb: # bottom
 204 ???? 00000000 	.skip spz
 204      00000000 
 204      00000000 
 204      00000000 
 204      00000000 
 205              	sp0: .word
 206              	
 207              	# return stack grows backward
 208              	_rpb: # bottom
 209 ???? 00000000 	.skip rpz
 209      00000000 
 209      00000000 
 209      00000000 
ARM GAS  /tmp/cczPqhvn.s 			page 5


 209      00000000 
 210              	rp0: .word
 211              	
 212              	#-----------------------------------------------------------------------
 213              	# start of user dictionary
 214              	# anything above is not a primitive
 215              	# usually .heap
 216              	# MUST BE AT END OF .BSS
 217              	#----------------------------------------------------------------------
 218 ???? 00000000 	ends: .word 0x0
 219              	
 220              	#----------------------------------------------------------------------
 221              	.text
 222              	.p2align 2, 0x0
 223              	
 224              	#----------------------------------------------------------------------
 225              	.ifndef _start
 226              	.globl _start
 227              	_start:
 228              	.endif
 229              	
 230              	main:
 231              	
 232              	        # bl _init
 233              	
 234              	
 235              	#----------------------------------------------------------------------
 236              	# do what need once
 237              	cold:
 238              	# just for sake
 239              	
 240              	#; fence
 241              	
 242              	# load user pointer address
 243              	
 244 ???? 08001FE5 	        ldr r0,# _user
 245              	
 246              	#----------------------------------------------------------------------
 247              	# wipe the dictionary
 248              	warm:
 249              	# link list of headers, aka dictionary
 250              	
 251 ???? F8309FE5 	        ldr r3, #h_exit
 252              	
 253 ???? 023080E5 	        str r3, [r0, #LAST]
 254              	
 255              	# next heap free cell
 256              	
 257 ???? B0319FE5 	        ldr r3, ends
 258              	
 259 ???? 033080E5 	        str r3, [r0, #HERE]
 260              	
 261              	#---------------------------------------------------------------------
 262              	# reset TIB
 263              	reset:
 264              	
 265 ???? 20209FE5 	        ldr r2, _tib
ARM GAS  /tmp/cczPqhvn.s 			page 6


 266              	
 267              	        str zero, [r2, #0]
 268              	
 269              	#---------------------------------------------------------------------
 270              	abort:
 271              	# reset data stack
 272              	
 273 ???? 20219FE5 	        ldr r2, sp0
 274              	
 275 ???? 042080E5 	        str r2, [r0, #SPT]
 276              	
 277              	        # bl prompt_erro ('??\n')
 278              	
 279              	#---------------------------------------------------------------------
 280              	quit:
 281              	# reset return stack
 282              	
 283 ???? B0219FE5 	        ldr r2, rp0
 284              	
 285 ???? 052080E5 	        str r2, [r0, #RPT]
 286              	
 287              	# stat is 'interpret' == \0
 288              	
 289              	        str zero, STAT (r0)
 290              	
 291              	        j okey
 292              	
 293              	#---------------------------------------------------------------------
 294              	# the outer loop, need for indirect
 295              	
 296              	resolvept:
 297              	
 298 ???? 2C000000 	        .word okey
 299              	
 300              	#---------------------------------------------------------------------
 301              	okey:
 302              	
 303              	        # bl prompt_okey ('OK\n')
 304              	
 305              	#---------------------------------------------------------------------
 306              	# get a hash of the token
 307              	resolve:
 308              	
 309 ???? 050000EB 	        bl token
 310              	
 311              	#---------------------------------------------------------------------
 312              	# find de code
 313              	tick:
 314              	
 315              	#---------------------------------------------------------------------
 316              	# search for a hash in dictionary linked list
 317              	
 318              	# get the latest link
 319              	
 320              	        lw r4, [r0, #LAST]
 321              	
 322              	100:
ARM GAS  /tmp/cczPqhvn.s 			page 7


 323              	# verify end of dictionary, abort (could be number?)
 324              	
 325              	        beq r4, zero, abort
 326              	
 327              	# linked list
 328              	
 329 ???? 0450A0E1 	        mov r5, r4
 330              	
 331              	 # get next link
 332              	
 333              	        lw r4, [r5, #0]
 334              	
 335              	# move to hash
 336              	
 337              	        add r5, r5, CELL
 338              	
 339              	        lw r6,[r5, #0]
 340              	
 341              	# set the FLAG
 342              	
 343              	        lui r7, FLAG_IMM
 344              	
 345              	        li r7, 0x0
 346              	
 347              	# mask hash flag
 348              	
 349 ???? 077006E0 	        and r7, r6, r7
 350              	
 351              	        xor r6, r6, r7
 352              	
 353              	 # compare
 354              	
 355              	        beq r3, r6, 100f
 356              	
 357              	# next link
 358              	
 359              	       j 100b
 360              	
 361              	100:
 362              	# move to code
 363              	# r5 points to or start of code or list of references
 364              	
 365              	       add r5, r5, CELL
 366              	
 367              	#---------------------------------------------------------------------
 368              	eval:
 369              	# immediate ? if i!= 0
 370              	
 371              	        bne r7, zero, immediate
 372              	
 373              	# executing ? if == \0
 374              	
 375              	        lb r6, STAT+0 (r0)
 376              	
 377              	        beq r6, zero, execute
 378              	
 379              	#---------------------------------------------------------------------
ARM GAS  /tmp/cczPqhvn.s 			page 8


 380              	compile:
 381              	
 382 ???? 080000EB 	        bl wcomma
 383              	
 384              	        j resolve
 385              	
 386              	#---------------------------------------------------------------------
 387              	execute:
 388              	immediate:
 389              	
 390 ???? 1C101FE5 	        ldr r1, resolvept
 391              	
 392              	        j pick
 393              	
 394              	#---------------------------------------------------------------------
 395              	# absolute crude getline, continues until \n
 396              	getline:
 397              	# get the TIB
 398              	
 399 ???? 20209FE5 	        ldr r2, _tib
 400              	
 401              	        str r2, TOIN (r0)
 402              	
 403              	# end-of-line is newline
 404              	
 405              	        addi r7, zero, NLC
 406              	
 407              	# ever start with a space
 408              	
 409              	        mov r6, a5
 410              	
 411              	 # fill the TIB until \n
 412              	100:
 413              	        sb r6, 0 (r2)
 414              	
 415              	        addi r2, r2, ONE
 416              	
 417 ???? 360000EB 	        bl _getc
 418              	
 419              	# 7-bit ascii only
 420              	# andi r6, 0x7F
 421              	
 422              	# \n ends
 423              	
 424              	        bne r6, r7, 100b
 425              	
 426              	# at end-of-line
 427              	
 428              	# replace \n with space
 429              	100:
 430              	
 431              	        str a5, 0 (r2)
 432              	
 433              	# mark eol with \0
 434              	
 435              	        str zero, 1 (r2)
 436              	
ARM GAS  /tmp/cczPqhvn.s 			page 9


 437              	        # falltrought
 438              	
 439              	#---------------------------------------------------------------------
 440              	# in place every token, no rewinds
 441              	# the counter is placed at space before word
 442              	# returns a c-str
 443              	
 444              	# \0 as eol goto getline
 445              	
 446              	token:
 447              	# last position on tib
 448              	
 449              	        lw r2, TOIN (r0)
 450              	
 451              	# skip spaces
 452              	100:
 453              	        lb r6, 0 (r2)
 454              	
 455              	        beq r6, zero, getline
 456              	
 457              	        addi r2, r2, ONE
 458              	
 459              	        bne r6, a5, 100f
 460              	
 461              	        j 100b
 462              	100:
 463              	
 464              	# preserve return
 465              	
 466              	        mov a6, ra
 467              	
 468              	# make hash
 469              	
 470 ???? 010000EB 	        bl djb2
 471              	
 472              	# restore return
 473              	
 474              	        mov ra, a6
 475              	
 476              	 # mask forth flag
 477              	mask:
 478              	
 479              	# set the FLAG as complement
 480              	
 481              	        lui r6, FLAG_IMM - 1
 482              	
 483              	        li r6, -1
 484              	
 485 ???? 063003E0 	        and r3, r3, r6
 486              	
 487              	 # save toin
 488              	
 489              	        str r2, TOIN (r0)
 490              	
 491 ???? 1EFF2FE1 	        bx lr
 492              	
 493              	 #---------------------------------------------------------------------
ARM GAS  /tmp/cczPqhvn.s 			page 10


 494              	
 495              	# generics
 496              	
 497              	#---------------------------------------------------------------------
 498              	
 499              	#----------------------------------------------------------------------
 500              	# djb2 hash function
 501              	# classic djb2 hash algorithm, with XOR, adapted from cdb_hash
 502              	# r2 pointer to str
 503              	# a6 hold the end of word character ( \0 or spc)
 504              	# uses r6, r7
 505              	 # r3 returns the hash
 506              	djb2:
 507              	        # easy 3581
 508              	        addi r3, zero, 2000
 509              	
 510              	        addi r3, r3, 1581
 511              	
 512              	100:
 513              	        lb r6, 0 (r2)
 514              	
 515              	        # beq r6, zero, 100f
 516              	
 517              	        beq r6, a5, 100f
 518              	
 519 ???? 0370A0E1 	        mov r7, r3
 520              	
 521              	        slli r3, r3, 5
 522              	
 523 ???? 073083E0 	        add r3, r3, r7
 524              	
 525              	        xor r3, r3, r6
 526              	
 527              	        addi r2, r2, ONE
 528              	
 529              	        j 100b
 530              	
 531 ???? 1EFF2FE1 	100: bx lr
 532              	
 533              	 #---------------------------------------------------------------------
 534              	wcomma:
 535              	
 536              	        lw r2, HERE (r0)
 537              	
 538              	        str r5, 0 (r2)
 539              	
 540              	        addi r2, r2, CELL
 541              	
 542              	        str r2, HERE (r0)
 543              	
 544 ???? 1EFF2FE1 	        bx lr
 545              	
 546              	 #---------------------------------------------------------------------
 547              	load2:
 548              	
 549              	        lw r2, [r0, #SPT]
 550              	
ARM GAS  /tmp/cczPqhvn.s 			page 11


 551              	        lw r7, 0 * CELL (r2)
 552              	
 553              	        lw r6, 1 * CELL (r2)
 554              	
 555 ???? 1EFF2FE1 	        bx lr
 556              	
 557              	 #---------------------------------------------------------------------
 558              	
 559              	# extras
 560              	
 561              	#---------------------------------------------------------------------
 562              	.ifdef use_extras
 563              	.include "extras-milliforth.S"
 564              	.endif
 565              	
 566              	#---------------------------------------------------------------------
 567              	
 568              	# extensions
 569              	
 570              	#---------------------------------------------------------------------
 571              	.ifdef use_extensions
 572              	.include "extensions-milliforth.S"
 573              	.endif
 574              	
 575              	#---------------------------------------------------------------------
 576              	
 577              	# the primitives
 578              	
 579              	#---------------------------------------------------------------------
 580              	# 636 "sector-arm.S"
 581              	#---------------------------------------------------------------------
 582              	# ( -- c )
 583              	def_word "key", "key", 0x0, hash_key
 583              	> 
 583              	> h_key:
 583 ???? 00000000 	>  .word 0x0
 583 ???? 326D870B 	>  .word hash_key
 583              	> 
 583              	> key:
 584              	
 585 ???? 2B0000EB 	        bl _getc
 586              	
 587              	        j push1
 588              	
 589              	#---------------------------------------------------------------------
 590              	# ( c -- )
 591              	def_word "emit", "emit", h_key, hash_emit
 591              	> 
 591              	> h_emit:
 591 ???? 68000000 	>  .word h_key
 591 ???? D0876B7C 	>  .word hash_emit
 591              	> 
 591              	> emit:
 592              	
 593 ???? F8FFFFEB 	        bl load2
 594              	
 595 ???? 2C0000EB 	        bl _putc
ARM GAS  /tmp/cczPqhvn.s 			page 12


 596              	
 597              	        j drop1
 598              	
 599              	#---------------------------------------------------------------------
 600              	# ( a w -- ), [a] = w
 601              	def_word "!", "store", h_emit, hash_store
 601              	> 
 601              	> h_store:
 601 ???? 74000000 	>  .word h_emit
 601 ???? 84B50200 	>  .word hash_store
 601              	> 
 601              	> store:
 602              	
 603 ???? F4FFFFEB 	        bl load2
 604              	
 605              	        str r6, 0 (r7)
 606              	drop2:
 607              	
 608              	        add r2, r2, CELL
 609              	drop1:
 610              	
 611              	        add r2, r2, CELL
 612              	
 613 ???? 042080E5 	        str r2, [r0, #SPT]
 614              	
 615              	        j next
 616              	
 617              	#---------------------------------------------------------------------
 618              	# ( a -- w ), w = [a]
 619              	def_word "@", "fetch", h_store, hash_fetch
 619              	> 
 619              	> h_fetch:
 619 ???? 84000000 	>  .word h_store
 619 ???? E5B50200 	>  .word hash_fetch
 619              	> 
 619              	> fetch:
 620              	
 621 ???? F0FFFFEB 	        bl load2
 622              	
 623              	        lw r6, 0 (r7)
 624              	
 625              	        j save0
 626              	
 627              	#---------------------------------------------------------------------
 628              	# ( w1 w2 -- w), NOT(w1 AND w2)
 629              	def_word "nand", "nand", h_nand, hash_nand
 629              	> 
 629              	> h_nand:
 629 ???? A0000000 	>  .word h_nand
 629 ???? 0075727C 	>  .word hash_nand
 629              	> 
 629              	> nand:
 630              	
 631 ???? EDFFFFEB 	        bl load2
 632              	
 633 ???? 066007E0 	        and r6, r7, r6
 634              	
ARM GAS  /tmp/cczPqhvn.s 			page 13


 635              	        not r6, r6
 636              	
 637              	save1:
 638              	
 639              	        add r2, r2, CELL
 640              	
 641 ???? 042080E5 	        str r2, [r0, #SPT]
 642              	
 643              	        j save0
 644              	
 645              	#---------------------------------------------------------------------
 646              	# ( w1 w2 -- w), w = w1 + w2
 647              	def_word "+", "plus", h_nand, hash_plus
 647              	> 
 647              	> h_plus:
 647 ???? A0000000 	>  .word h_nand
 647 ???? 8EB50200 	>  .word hash_plus
 647              	> 
 647              	> plus:
 648              	
 649 ???? E8FFFFEB 	        bl load2
 650              	
 651 ???? 076086E0 	        add r6, r6, r7
 652              	
 653              	        j save1
 654              	
 655              	#---------------------------------------------------------------------
 656              	# ( 0 -- FALSE) | ( n -- TRUE), not zero at top ?
 657              	def_word "0#", "zeroq", h_plus, hash_notzero
 657              	> 
 657              	> h_zeroq:
 657 ???? B4000000 	>  .word h_plus
 657 ???? 16685900 	>  .word hash_notzero
 657              	> 
 657              	> zeroq:
 658              	
 659 ???? E4FFFFEB 	        bl load2
 660              	
 661              	isfalse:
 662              	
 663              	        beq r7, zero, next
 664              	
 665              	istrue:
 666              	
 667              	        addi r6, zero, TRUE
 668              	
 669              	        j save0
 670              	
 671              	#---------------------------------------------------------------------
 672              	# ( -- state ), return an reference
 673              	def_word "s@", "state", h_zeroq, hash_userat
 673              	> 
 673              	> h_state:
 673 ???? C4000000 	>  .word h_zeroq
 673 ???? D6705900 	>  .word hash_userat
 673              	> 
 673              	> state:
ARM GAS  /tmp/cczPqhvn.s 			page 14


 674              	
 675 ???? 0060A0E1 	        mov r6, r0
 676              	
 677              	push1:
 678              	
 679              	        lw r2, [r0, #SPT]
 680              	
 681              	        addi r2, r2, -1 * CELL
 682              	
 683 ???? 042080E5 	        str r2, [r0, #SPT]
 684              	
 685              	save0:
 686              	
 687              	        str r6, 0 (r2)
 688              	
 689              	        j next
 690              	
 691              	#---------------------------------------------------------------------
 692              	def_word ":", "colon", h_state, hash_colon
 692              	> 
 692              	> h_colon:
 692 ???? D0000000 	>  .word h_state
 692 ???? 9FB50200 	>  .word hash_colon
 692              	> 
 692              	> colon:
 693              	# save here, panic if semis not follow elsewhere
 694              	
 695              	        lw r6, HERE (r0)
 696              	
 697              	        str r6, ONCE (r0)
 698              	
 699              	# stat is 'compile' == 1
 700              	
 701              	        addi r6, zero, ONE
 702              	
 703              	        str r6, STAT (r0)
 704              	
 705              	# make a header:
 706              	
 707              	# copy last into (here)
 708              	
 709              	        lw r5, LAST (r0)
 710              	
 711 ???? DCFFFFEB 	        bl wcomma
 712              	
 713              	# get following token
 714              	
 715 ???? D5FFFFEB 	        bl token
 716              	
 717              	# copy the hash
 718              	
 719 ???? 0350A0E1 	        mov r5, r3
 720              	
 721              	 #---------------------------------------------------------------------
 722              	finish:
 723              	
 724 ???? D9FFFFEB 	        bl wcomma
ARM GAS  /tmp/cczPqhvn.s 			page 15


 725              	
 726              	# done
 727              	        j next
 728              	
 729              	#---------------------------------------------------------------------
 730              	def_word ";", "semis", h_colon, hash_semis
 730              	> 
 730              	> h_semis:
 730 ???? E0000000 	>  .word h_colon
 730 ???? 9EB50280 	>  .word hash_semis
 730              	> 
 730              	> semis:
 731              	# update last, panic if colon not lead elsewhere
 732              	
 733              	        lw r6, ONCE (r0)
 734              	
 735              	        str r6, LAST (r0)
 736              	
 737              	# stat is 'interpret' == 0
 738              	
 739              	        str zero, STAT (r0)
 740              	
 741              	# compound words must ends with exit
 742              	
 743 ???? 04509FE5 	        ldr r5, exit
 744              	
 745              	        j finish
 746              	
 747              	#---------------------------------------------------------------------
 748              	# Minimal Indirect Thread Code Engine
 749              	
 750              	# this is the Forth heart beat.
 751              	
 752              	# nest aka enter or docol,
 753              	# unnest aka exit or semis;
 754              	
 755              	# "why there is no 'docol at start of words ?"
 756              	
 757              	#---------------------------------------------------------------------
 758              	# ( -- )
 759              	def_word "exit", "exit", h_semis, hash_exit
 759              	> 
 759              	> h_exit:
 759 ???? F8000000 	>  .word h_semis
 759 ???? 85BE6B7C 	>  .word hash_exit
 759              	> 
 759              	> exit:
 760              	unnest: #; exit
 761              	# return pull, r1 = (rpt), rpt += cell
 762              	
 763              	        lw r2, [r0, #RPT]
 764              	
 765              	        lw r1, 0 (r2)
 766              	
 767              	        addi r2, r2, CELL
 768              	
 769 ???? 052080E5 	        str r2, [r0, #RPT]
ARM GAS  /tmp/cczPqhvn.s 			page 16


 770              	
 771              	next:
 772              	# r5 = (r1) #; r1 += cell
 773              	
 774              	        lw r5, 0 (r1)
 775              	
 776              	        addi r1, r1, CELL
 777              	
 778              	pick:
 779              	# compare address, if less than 'ends then is a primitive 
 780              	
 781 ???? B0219FE5 	        ldr r2, ends
 782              	
 783              	        blt r5, r2, jump
 784              	
 785              	nest: #; enter
 786              	# return push, (rpt) = r1, rp -= cell
 787              	
 788              	        lw r2, [r0, #RPT]
 789              	
 790              	        addi r2, r2, -1 * CELL
 791              	
 792              	        str r1, 0 (r2)
 793              	
 794 ???? 052080E5 	        str r2, [r0, #RPT]
 795              	
 796              	move:
 797              	# indirect access
 798              	
 799 ???? 0510A0E1 	        mov r1, r5
 800              	
 801              	        j next
 802              	
 803              	jump:
 804              	# jump to primitive
 805              	
 806              	        jalr zero,[r5, #0]
 807              	
 808              	#----------------------------------------------------------------------
 809              	# system dependences, linux svc #0
 810              	
 811              	.include "minimal.S"
   1              	/*
   2              	
   3              	 Copyright (c) 2025, Alvaro Gomes Sobral Barcellos
   4              	 All rights reserved.
   5              	 
   6              	 see the disclaimer file in this repository.
   7              	
   8              	 minimal elf with exit code
   9              	*/
  10              	
  11              	#define ecall   svc #0   
  12              	#define call    bl   
  13              	#define ret     bx lr
  14              	
  15              	#---------------------------------------------------------------------
ARM GAS  /tmp/cczPqhvn.s 			page 17


  16              	# linux svc #0 stuff, 29/07/2025, vide:
  17              	# https://github.com/riscv-software-src/riscv-pk/blob/master/pk/syscall.h
  18              	
  19              	.equ ONE,       1
  20              	.equ STDIN,     0
  21              	.equ STDOUT,    1
  22              	.equ GETC,     63
  23              	.equ PUTC,     64
  24              	.equ EXIT,     93
  25              	
  26              	#---------------------------------------------------------------------
  27              	.section .bss
  28              	
  29              	.ifndef _pad
  30              	_pad:
  31              	.skip 32
  32              	.endif
  33              	
  34              	#---------------------------------------------------------------------
  35              	.section .text
  36              	
  37              	.ifndef _start
  38              	.globl _start
  39              	_start:
  40              	.endif
  41              	
  42              	# load system call for exit
  43              	_exit:
  44 ???? 0000A0E3 	        mov r0,  #STDIN
  45 ???? 5D70A0E3 	        mov r7,  #EXIT
  46              	        ecall
  47              	
  48              	# load system call for init
  49              	_init:
  50              	        ret
  51              	
  52              	# linux svc #0 for getc
  53              	_getc:
  54 ???? 0000A0E3 	        mov r0,  #STDIN
  55 ???? 1C109FE5 	        ldr r1, =_pad
  56 ???? 0120A0E3 	        mov r2,  #ONE
  57 ???? 3F70A0E3 	        mov r7,  #GETC
  58              	        ecall
  59 ???? 003091E5 	        ldr r3, [r1]
  60              	        ret
  61              	
  62              	# linux svc #0 for putc
  63              	_putc:
  64 ???? 003081E5 	        str r3, [r1]
  65 ???? 0100A0E3 	        mov r0,  #STDOUT
  66 ???? 04109FE5 	        ldr r1, =_pad
  67 ???? 0120A0E3 	        mov r2,  #ONE
  68 ???? 4070A0E3 	        mov r7,  #PUTC
  69              	        ecall
  70              	        ret
  71              	
  72              	# just not necessary
ARM GAS  /tmp/cczPqhvn.s 			page 18


  73              	
  74              	.if 0
  75              	# linux svc #0 for puts
  76              	_puts:
  77              	        # pointer to msg
  78              	        add r1, t3, zero
  79              	        # lenght of msg
  80              	        add r2, t4, zero
  81              	
  82              	        mov r0,  #STDOUT
  83              	        mov r7,  #PUTC
  84              	        ecall
  85              	        j _init
  86              	.endif
  87              	
  88              	
 812              	
 813              	#-----------------------------------------------------------------------
 814              	# BEWARE, MUST BE AT END! MINIMAL THREAD CODE DEPENDS ON IT!
 815              	# for riscv-unknow-elf moved to end of .bss
 816              	#-----------------------------------------------------------------------
 817              	
 818 ???? 78000000 	.end
ARM GAS  /tmp/cczPqhvn.s 			page 19


DEFINED SYMBOLS
     /tmp/cczPqhvn.s:24     *ABS*:00000000 FALSE
     /tmp/cczPqhvn.s:26     *ABS*:ffffffff TRUE
     /tmp/cczPqhvn.s:30     *ABS*:00000001 ONE
     /tmp/cczPqhvn.s:32     *ABS*:00000002 TWO
     /tmp/cczPqhvn.s:34     *ABS*:0000000a NLC
     /tmp/cczPqhvn.s:36     *ABS*:00000020 SPC
     /tmp/cczPqhvn.s:40     *ABS*:00000004 CELL
     /tmp/cczPqhvn.s:44     *ABS*:00000090 spz
     /tmp/cczPqhvn.s:48     *ABS*:00000090 rpz
     /tmp/cczPqhvn.s:52     *ABS*:00000050 tibz
     /tmp/cczPqhvn.s:56     *ABS*:00000020 padz
     /tmp/cczPqhvn.s:62     *ABS*:0b876d32 hash_key
     /tmp/cczPqhvn.s:63     *ABS*:7c6b87d0 hash_emit
     /tmp/cczPqhvn.s:64     *ABS*:0002b584 hash_store
     /tmp/cczPqhvn.s:65     *ABS*:0002b5e5 hash_fetch
     /tmp/cczPqhvn.s:66     *ABS*:0002b58e hash_plus
     /tmp/cczPqhvn.s:67     *ABS*:0002b59f hash_colon
     /tmp/cczPqhvn.s:68     *ABS*:8002b59e hash_semis
     /tmp/cczPqhvn.s:69     *ABS*:7c727500 hash_nand
     /tmp/cczPqhvn.s:70     *ABS*:7c6bbe85 hash_exit
     /tmp/cczPqhvn.s:71     *ABS*:0b874afb hash_bye
     /tmp/cczPqhvn.s:72     *ABS*:00596816 hash_notzero
     /tmp/cczPqhvn.s:73     *ABS*:005970d6 hash_userat
     /tmp/cczPqhvn.s:89     *ABS*:00080000 FLAG_IMM
     /tmp/cczPqhvn.s:151    .bss:00000000 $d
     /tmp/cczPqhvn.s:161    *ABS*:00000000 STAT
     /tmp/cczPqhvn.s:164    *ABS*:00000001 TOIN
     /tmp/cczPqhvn.s:167    *ABS*:00000002 LAST
     /tmp/cczPqhvn.s:170    *ABS*:00000003 HERE
     /tmp/cczPqhvn.s:173    *ABS*:00000004 SPT
     /tmp/cczPqhvn.s:176    *ABS*:00000005 RPT
     /tmp/cczPqhvn.s:179    *ABS*:00000006 TOUT
     /tmp/cczPqhvn.s:182    *ABS*:00000007 ONCE
     /tmp/cczPqhvn.s:185    *ABS*:00000008 HEAD
     /tmp/cczPqhvn.s:188    *ABS*:00000009 TAIL
     /tmp/cczPqhvn.s:191    .bss:00000000 _user
     /tmp/cczPqhvn.s:195    .bss:00000028 _tib
     /tmp/cczPqhvn.s:199    .bss:00000078 _pad
     /tmp/cczPqhvn.s:203    .bss:00000098 _spb
     /tmp/cczPqhvn.s:205    .bss:00000128 sp0
     /tmp/cczPqhvn.s:208    .bss:00000128 _rpb
     /tmp/cczPqhvn.s:210    .bss:000001b8 rp0
     /tmp/cczPqhvn.s:218    .bss:000001b8 ends
     /tmp/cczPqhvn.s:227    .text:00000000 _start
     /tmp/cczPqhvn.s:230    .text:00000000 main
     /tmp/cczPqhvn.s:237    .text:00000000 cold
     /tmp/cczPqhvn.s:244    .text:00000000 $a
     /tmp/cczPqhvn.s:248    .text:00000004 warm
     /tmp/cczPqhvn.s:759    .text:00000104 h_exit
     /tmp/cczPqhvn.s:263    .text:00000014 reset
     /tmp/cczPqhvn.s:270    .text:00000018 abort
     /tmp/cczPqhvn.s:280    .text:00000020 quit
     /tmp/cczPqhvn.s:296    .text:00000028 resolvept
     /tmp/cczPqhvn.s:298    .text:00000028 $d
     /tmp/cczPqhvn.s:301    .text:0000002c okey
     /tmp/cczPqhvn.s:307    .text:0000002c resolve
ARM GAS  /tmp/cczPqhvn.s 			page 20


     /tmp/cczPqhvn.s:446    .text:00000048 token
     /tmp/cczPqhvn.s:309    .text:0000002c $a
     /tmp/cczPqhvn.s:313    .text:00000030 tick
     /tmp/cczPqhvn.s:368    .text:00000038 eval
     /tmp/cczPqhvn.s:380    .text:00000038 compile
     /tmp/cczPqhvn.s:534    .text:00000060 wcomma
     /tmp/cczPqhvn.s:387    .text:0000003c execute
     /tmp/cczPqhvn.s:388    .text:0000003c immediate
     /tmp/cczPqhvn.s:396    .text:00000040 getline
           minimal.S:53     .text:00000124 _getc
     /tmp/cczPqhvn.s:506    .text:00000054 djb2
     /tmp/cczPqhvn.s:477    .text:0000004c mask
     /tmp/cczPqhvn.s:547    .text:00000064 load2
     /tmp/cczPqhvn.s:583    .text:00000068 h_key
     /tmp/cczPqhvn.s:583    .text:00000068 $d
     /tmp/cczPqhvn.s:583    .text:00000070 key
     /tmp/cczPqhvn.s:585    .text:00000070 $a
     /tmp/cczPqhvn.s:591    .text:00000074 h_emit
     /tmp/cczPqhvn.s:591    .text:00000074 $d
     /tmp/cczPqhvn.s:591    .text:0000007c emit
     /tmp/cczPqhvn.s:593    .text:0000007c $a
           minimal.S:63     .text:00000138 _putc
     /tmp/cczPqhvn.s:601    .text:00000084 h_store
     /tmp/cczPqhvn.s:601    .text:00000084 $d
     /tmp/cczPqhvn.s:601    .text:0000008c store
     /tmp/cczPqhvn.s:603    .text:0000008c $a
     /tmp/cczPqhvn.s:606    .text:00000090 drop2
     /tmp/cczPqhvn.s:609    .text:00000090 drop1
     /tmp/cczPqhvn.s:619    .text:00000094 h_fetch
     /tmp/cczPqhvn.s:619    .text:00000094 $d
     /tmp/cczPqhvn.s:619    .text:0000009c fetch
     /tmp/cczPqhvn.s:621    .text:0000009c $a
     /tmp/cczPqhvn.s:629    .text:000000a0 h_nand
     /tmp/cczPqhvn.s:629    .text:000000a0 $d
     /tmp/cczPqhvn.s:629    .text:000000a8 nand
     /tmp/cczPqhvn.s:631    .text:000000a8 $a
     /tmp/cczPqhvn.s:637    .text:000000b0 save1
     /tmp/cczPqhvn.s:647    .text:000000b4 h_plus
     /tmp/cczPqhvn.s:647    .text:000000b4 $d
     /tmp/cczPqhvn.s:647    .text:000000bc plus
     /tmp/cczPqhvn.s:649    .text:000000bc $a
     /tmp/cczPqhvn.s:657    .text:000000c4 h_zeroq
     /tmp/cczPqhvn.s:657    .text:000000c4 $d
     /tmp/cczPqhvn.s:657    .text:000000cc zeroq
     /tmp/cczPqhvn.s:659    .text:000000cc $a
     /tmp/cczPqhvn.s:661    .text:000000d0 isfalse
     /tmp/cczPqhvn.s:665    .text:000000d0 istrue
     /tmp/cczPqhvn.s:673    .text:000000d0 h_state
     /tmp/cczPqhvn.s:673    .text:000000d0 $d
     /tmp/cczPqhvn.s:673    .text:000000d8 state
     /tmp/cczPqhvn.s:675    .text:000000d8 $a
     /tmp/cczPqhvn.s:677    .text:000000dc push1
     /tmp/cczPqhvn.s:685    .text:000000e0 save0
     /tmp/cczPqhvn.s:692    .text:000000e0 h_colon
     /tmp/cczPqhvn.s:692    .text:000000e0 $d
     /tmp/cczPqhvn.s:692    .text:000000e8 colon
     /tmp/cczPqhvn.s:711    .text:000000e8 $a
ARM GAS  /tmp/cczPqhvn.s 			page 21


     /tmp/cczPqhvn.s:722    .text:000000f4 finish
     /tmp/cczPqhvn.s:730    .text:000000f8 h_semis
     /tmp/cczPqhvn.s:730    .text:000000f8 $d
     /tmp/cczPqhvn.s:730    .text:00000100 semis
     /tmp/cczPqhvn.s:759    .text:0000010c exit
     /tmp/cczPqhvn.s:743    .text:00000100 $a
     /tmp/cczPqhvn.s:759    .text:00000104 $d
     /tmp/cczPqhvn.s:760    .text:0000010c unnest
     /tmp/cczPqhvn.s:769    .text:0000010c $a
     /tmp/cczPqhvn.s:771    .text:00000110 next
     /tmp/cczPqhvn.s:778    .text:00000110 pick
     /tmp/cczPqhvn.s:785    .text:00000114 nest
     /tmp/cczPqhvn.s:796    .text:00000118 move
     /tmp/cczPqhvn.s:803    .text:0000011c jump
           minimal.S:20     *ABS*:00000000 STDIN
           minimal.S:21     *ABS*:00000001 STDOUT
           minimal.S:22     *ABS*:0000003f GETC
           minimal.S:23     *ABS*:00000040 PUTC
           minimal.S:24     *ABS*:0000005d EXIT
           minimal.S:43     .text:0000011c _exit
           minimal.S:49     .text:00000124 _init
     /tmp/cczPqhvn.s:818    .text:0000014c $d

UNDEFINED SYMBOLS
r4
r3
r7
r6
r5
